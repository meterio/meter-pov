// Code generated by go-bindata. DO NOT EDIT.
// sources:
// shoal/delegates.json (1.165kB)
// mainnet/delegates.json (1.95kB)

package preset

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shoalDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd3\x49\x8f\xa3\x46\x1c\x05\xf0\x7b\x7f\x0a\xe4\x2b\x23\xbb\xa8\x2a\x6a\xb1\x34\x07\x30\x18\x1b\xbc\xd1\xde\x89\xa2\x16\xab\x6d\x08\x66\x71\x01\x6e\x47\xf3\xdd\x23\x4f\xa6\x6f\x96\x22\x25\xb9\xbe\xd2\xff\xf0\xde\x4f\xf5\xdb\x9b\x24\xfd\xf9\x26\x49\x92\xd4\xbb\xfa\x79\xdc\x1b\x4a\x3d\xa1\xf4\xbe\xfd\x9d\xf8\x51\x54\xc7\xb7\xdb\x33\x04\x77\xa2\x32\x9d\x44\x3e\xa1\x10\x71\xca\xe3\x91\x4a\x92\x38\x51\x20\x27\x63\x45\x51\x31\xa5\x98\x00\x8d\x51\x4e\xbf\x8e\xcb\x26\xf8\xc8\xe2\xcf\xe7\xb1\x6e\xb0\xda\xeb\xd2\xe8\x52\xf3\xf3\x25\x12\xd5\xdd\x70\xd4\x3a\x08\xac\xda\x5a\x7b\x5c\xf7\xc0\x3b\x67\xa9\x26\xca\xbb\x13\xcd\x6c\x70\x45\x7a\x30\x8e\xa7\x40\x15\x41\x29\xf6\xa2\xb5\xd5\x43\x9e\xe5\x58\x0d\x9d\xae\xb4\xbc\xea\x8e\xb8\x0f\x9a\x79\xe6\x73\xf0\x7d\x38\x1c\x26\xbc\x39\xaf\xad\x70\x73\x78\xd7\xb3\x65\x55\x1e\x1b\x23\x4b\x3b\x9c\xe5\x61\x9b\x6b\xe6\xcc\xf2\x1b\x3a\xb7\x77\xd6\xc9\xed\x56\xb2\x45\x90\xdc\x3e\x3a\x73\x2b\xef\x47\x0d\x88\xc1\x62\xac\xe7\xf6\xb8\xbc\x6d\xb8\xe7\x9e\xa6\xad\x5f\x3e\xca\xa3\x12\xb5\x17\x67\xec\x6a\xdf\xbf\x5a\xb4\x85\xb8\x5c\x4f\x1f\x65\xd1\xc5\x75\x6f\x28\x29\x00\xfc\x7a\xb8\xc6\xa2\x2b\xea\xec\xe3\xb9\x51\x6f\xf8\x6b\x43\x49\xea\x5d\xca\x67\x63\xa4\xf6\x15\x02\xfb\x0c\xf4\x21\xfe\x5a\xe4\xb9\x49\x51\x8b\xde\x50\x62\x84\x82\x9f\xd1\x8f\x37\x49\xfa\xf1\xed\x05\x01\x7c\x49\x80\xb0\x6e\x70\x0a\x41\x82\x23\x86\x8c\x00\x86\x2c\xa2\x51\xcc\x68\x3c\x42\x2c\xa0\x0c\x41\x04\x94\x91\x46\x5e\x12\x4c\xaa\xc1\x22\x0f\x83\x78\xb9\x1e\x74\x66\xe5\x59\xd6\x71\x79\xca\x29\x1f\x88\x59\xe6\x7d\x02\x80\xa7\xe3\x06\x9f\xd2\xb5\xa0\xe9\xc5\x18\x24\xb3\xda\xbe\x45\xce\x7a\x52\xc5\x83\xc2\xad\x36\xea\x27\x65\x42\x90\x09\x7a\xd4\x40\x21\xe7\xf6\x20\xe2\xc1\x42\x74\xf4\x27\x41\xb0\x28\xbb\x64\x9d\xda\xc1\x2d\xdb\x2a\xe1\x43\x4f\x41\x39\x80\x47\x7c\x03\x28\x9d\xb0\xfc\xce\xaf\x3b\xd9\x3f\x1f\x54\x95\x29\xea\x64\xf1\x6e\x01\x24\x5f\xcd\x74\x39\xcb\xce\x78\x1f\x2e\x4e\xdb\x18\xce\x5d\x67\xb7\xe9\x18\xca\x4f\x8b\x2d\xb3\x1b\xca\xe7\x63\x76\x32\xff\x07\x02\x86\xfb\x8a\xca\xfa\x50\xe1\xff\x82\x00\xbd\x24\x88\x49\x48\x91\x42\x35\x48\x14\x13\x60\x15\xf9\x84\x72\x34\x06\xa1\x09\x31\x21\xa1\x0a\x58\x84\x12\x18\x02\xfc\x8a\x40\x3b\x36\xae\x1c\x85\xe5\xc4\x5b\xd1\xe4\xa2\x37\x4e\x02\xa2\x48\xf0\xaa\x32\x83\x7b\x9c\x0d\x54\x63\x6c\x9c\x0a\xc6\x69\xf8\x8e\x27\xc5\xce\x38\xfc\x51\x4f\x84\xdd\xae\xa2\x11\x39\x8e\xf4\x39\xde\x86\x6b\xbd\xe2\xb2\xa1\x5b\x9c\x4f\x6f\x1b\xd3\xbd\x26\x6b\xcf\x37\x9f\x04\x2b\x67\x5f\xe1\x9d\x5b\xb5\x07\x22\xeb\x32\xb2\xea\x76\x79\x5d\x9b\xb3\x62\x25\xa0\x76\x76\x92\x45\xf1\xf0\x8f\xf8\x32\x7d\x20\x01\x8d\xb6\x88\x85\x13\x19\x14\xd4\x2b\xe0\x76\x1b\x46\xf6\xd7\xd0\x51\x6e\x5b\x8d\x82\xb9\x9d\x2e\xed\x81\x4c\xb8\xa7\xb9\xb2\xf6\xdf\x09\x30\xee\x43\x04\xfb\x0a\xa1\x7d\x08\xff\xe9\x1b\xbc\xfd\xfe\xf6\x57\x00\x00\x00\xff\xff\xf4\x3d\x2f\x50\x8d\x04\x00\x00")

func shoalDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_shoalDelegatesJson,
		"shoal/delegates.json",
	)
}

func shoalDelegatesJson() (*asset, error) {
	bytes, err := shoalDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shoal/delegates.json", size: 1165, mode: os.FileMode(0644), modTime: time.Unix(1718038939, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0xe4, 0xb8, 0xcb, 0xb0, 0x3a, 0x32, 0xe5, 0x84, 0xf8, 0x1e, 0xce, 0x6c, 0xf1, 0x1e, 0xc5, 0xf4, 0x25, 0x14, 0x89, 0x60, 0xbd, 0x73, 0xb6, 0x4a, 0x84, 0xf6, 0xc3, 0x6b, 0x96, 0x31, 0xa1}}
	return a, nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd5\x4b\xcf\xa2\x4a\x1a\x07\xf0\xfd\xfb\x29\x8c\x5b\x7b\xa4\x8a\x82\x82\x32\xe9\x05\x57\x01\x01\x51\xbc\x32\x99\x74\xb8\xcb\x1d\x01\xc5\xd7\x49\x7f\xf7\x89\x3d\xdd\x3b\x4f\x4e\xd2\xa7\xb7\xf5\xe4\xa9\xe4\xf9\xff\x16\xff\x7f\x7f\x4c\x26\xff\xfd\x98\x4c\x26\x93\x69\xed\x57\xf1\x74\x31\x99\x56\x7e\x56\xff\x0b\xc0\xe9\x97\xff\x3f\xfb\x51\xd4\xc5\x7d\xff\x9a\x80\x87\x48\x78\xa0\x26\x08\x0b\x84\x48\x40\x42\x22\x03\x78\x9a\x23\x0a\xa0\xd9\x88\x57\x68\x59\xe0\x62\x15\xb3\x10\xb0\xbf\x96\xdb\x5b\xf0\xad\x88\x3f\x5f\xcb\xa2\x12\xdd\x1b\xa3\xf7\x4c\x6f\xa4\xab\x6a\xe5\x14\x9e\xde\x9a\x1b\x24\x12\xca\x04\xa3\xdf\x8d\x7d\x55\xb9\x30\xb2\x35\xf7\x94\xc8\x0e\xb8\x8b\x0f\x6c\xb8\xe7\xbe\xba\x1d\xc7\x9c\x42\x7d\xc3\xe6\x54\x55\x93\x75\xb2\x33\x2c\x4b\xb1\xd6\x94\x39\x6c\x2b\xd7\x59\x37\x5f\x17\x8b\x85\x79\xcc\x4a\x5d\xcc\xda\x6e\x73\xbc\x11\x29\x59\x3f\xf6\x4b\x4b\x21\x25\x20\x84\x30\xfb\xe6\xb9\xf5\x6b\x94\x0d\x71\xb7\xa4\xe8\xe7\x75\xd8\x3f\x15\x5c\x8f\xb4\x73\xe7\xef\xad\xa0\x1a\xee\x66\xf7\x64\x92\xe0\x4a\x5f\x22\x36\xd2\xba\x8d\x9e\x1f\x4f\x2c\xc7\x24\x83\x20\x7c\xfd\x75\xc5\xbd\x19\xb2\x3a\xfd\xd6\x36\x63\xdc\x4d\x17\x13\x08\xc0\xcf\x41\x1d\x0f\x63\xd3\x15\xdf\x5e\x19\x4d\x17\x3f\x83\x9c\x4c\xa6\x59\xfb\xba\x18\xcd\xc1\x1c\x91\x39\x4f\xff\xfc\xe7\x95\x47\xd3\x0d\xd3\xc5\x84\xc7\x1c\xf8\xf1\xf4\xfd\x63\x32\xf9\xfe\xe5\xaf\x0c\xe8\xb7\x06\x88\x66\x31\xc3\x20\x49\xe5\x24\x4e\xc2\x21\x11\x55\x12\xf2\x1c\x93\xb0\x09\x8d\x08\x4d\xb3\x0a\x08\x10\xc3\x73\xca\x5b\x03\xdf\xdf\x76\x09\x33\x1a\xde\x65\x58\x96\x69\x95\x25\x89\xb1\x7c\xd4\x20\x0a\xb7\x5c\xa5\x07\x2e\x7b\xb5\x42\x59\xbc\x07\x89\xdc\x53\x75\x9e\x1f\x98\x3c\x72\xef\x59\x10\x6e\x22\x05\xfb\x69\x51\xa6\x71\xbd\xaf\xad\x5d\x29\x10\x0a\x7b\x11\xca\x06\xa8\x3d\x8e\xfa\xcb\xe0\x20\x72\x9a\xbb\xcd\x1a\xee\x6a\x91\xac\x68\xc5\x5e\xf6\x46\x66\xbf\xda\x1e\x8a\x87\x06\x73\xf7\x80\x67\xa2\x42\x86\x2b\xcc\x66\x66\xa9\x47\x1a\x95\x39\x68\x99\x70\xc5\xe8\x8a\xbb\x74\xf5\x70\x87\x32\x2d\x5d\x81\x48\x96\x7d\x6e\x19\x6b\x76\x8a\xed\x53\x00\x73\x41\xf9\xe7\x06\x70\x0e\x11\x9e\x43\x0c\x7e\x57\x01\xbd\x55\xe0\x69\x46\x15\x39\xc8\x05\x00\x8a\x98\x66\xfc\x10\x08\x41\x20\x07\x88\x85\x44\xc1\x04\x61\x00\x89\x0c\x25\x3a\x7e\xab\xe0\xad\xa9\x2b\xf2\x57\xaa\xab\x9f\x52\xfd\xc2\x02\x75\x65\xf3\xcf\xd2\xb6\x0a\x5e\x5a\x45\xd9\x39\xbe\xce\x3a\xdb\xac\x65\x5d\xdd\xb5\x16\x65\x9e\xaf\x42\x7a\xf3\xe5\x9b\xfd\x7c\x68\xbb\x54\x3d\x65\x22\x95\x55\x1b\x33\x27\x5e\xa9\x6e\xac\x15\x9b\x53\x52\x4e\x1c\xe5\xa5\xe0\x0c\xb7\x07\xea\x96\xba\x0f\xf5\x3e\x19\xb9\xfd\xe1\x93\x9d\x99\x85\xfa\x3c\xeb\x8c\xaa\x1e\x10\xea\xfb\x6b\xb5\xc6\xd7\x9d\xcc\x7b\x71\x13\x7a\x9f\x81\x6d\x8c\x2b\xc7\xd4\xdb\x54\xba\x75\x36\x3d\xe4\x1b\x79\x5c\x3a\xf0\xbc\x1a\xe0\xc9\x63\x96\xa6\x55\xc2\x75\x37\xfe\x11\x05\x9a\x41\x73\x88\xb9\xdf\x55\x60\xde\x2a\x28\x18\xf3\x04\x41\x86\x13\x38\x04\xa2\x48\x48\x48\x0c\xfc\x98\xa1\x7d\x99\x8b\x25\x9e\x61\xb1\x0c\xd5\x90\x05\xf2\x3b\x05\xa3\xb2\x5c\x55\x3c\xd4\x1d\x30\xdc\x5d\x83\xad\x8b\xd1\xb1\xbb\x63\x79\xf0\x57\x2d\xcf\x0f\xba\x77\x19\xfb\x9a\x47\x97\x7a\x1c\x05\x1f\xd2\xc7\x95\xd1\xa5\x86\x79\x4e\xab\x53\x8f\xc2\x5b\xe4\x35\x8a\x2d\x5f\xae\xed\xe1\x68\xee\x1a\x52\x99\x4d\x1a\xb2\x89\x77\x67\x5e\x0a\x7a\x33\x5b\x93\x6e\xd0\x35\x6b\x2b\xce\xe8\x00\xac\x84\x5a\xd8\x9e\x77\x31\xd7\xca\xb3\x0e\xed\x91\xdc\x1d\x5c\x12\x39\x4a\xab\xa5\xab\xd0\x3c\xb9\x6d\x54\x17\xc5\x83\x6f\x83\x24\x12\xa5\x27\xe6\xfb\x59\x3f\x14\xc7\xd0\xcf\xb7\x92\xa2\xd9\x60\x0d\x87\x40\x62\xd2\x3f\xa0\x40\x23\x34\x67\xe7\x0c\xfe\x5d\x04\xf6\x2d\x02\x01\x48\x65\x39\x4e\xc2\x80\x23\x58\xf4\x43\x3a\xf0\x03\x9a\x0f\x39\x28\xc3\x50\x84\x89\x2c\x61\x89\x09\x19\x40\xde\x21\x88\x4f\xfd\x33\x53\x2a\xad\xbc\xcc\x0a\x72\x0d\x6c\x2a\xdf\x1c\xab\x23\x27\x25\xea\x33\xaf\x6a\xdb\x70\x06\xf7\x20\xb5\x4e\x13\x68\x33\x50\x50\xf4\x33\x1d\x9c\x2c\x64\xf6\xa1\x26\x70\xc7\x6c\xdd\x45\xc7\x2d\xf6\x85\xbd\x65\x52\xf1\xe1\xee\x68\x54\xcb\x98\x5b\xfa\xf1\xa3\x14\x9c\xfb\xcd\x7e\xec\x02\x56\x50\x35\x61\x53\x79\xda\x25\x31\xee\xa8\x74\x41\x06\xa3\x56\x5f\xd9\x87\xdb\xe7\xfe\xe6\x1b\xee\x53\x95\x86\x62\x49\x79\x97\x88\xd8\x60\x2f\x5c\x62\xa2\xd3\x10\x2e\x37\x26\x20\x59\x5c\xca\xd0\xd2\x04\xe1\x1e\xdd\xaf\xfb\x2b\xa5\x3d\xea\xf4\x0f\x94\x02\x66\xe7\xec\x8b\xe2\xef\x6a\xe1\xe3\x3f\x1f\xff\x0b\x00\x00\xff\xff\xd4\x6a\xd9\xf2\x9e\x07\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 1950, mode: os.FileMode(0644), modTime: time.Unix(1718038939, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7b, 0x79, 0x9d, 0x43, 0xa4, 0x55, 0xda, 0xd4, 0xf9, 0x1a, 0xf6, 0xc8, 0x34, 0x1f, 0x52, 0x78, 0x19, 0x38, 0x3b, 0x96, 0xa6, 0xa, 0x52, 0x4f, 0x16, 0x69, 0xb9, 0x91, 0xd, 0x91, 0xcf, 0xb2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shoal/delegates.json":   shoalDelegatesJson,
	"mainnet/delegates.json": mainnetDelegatesJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": {nil, map[string]*bintree{
		"delegates.json": {mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"shoal": {nil, map[string]*bintree{
		"delegates.json": {shoalDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
