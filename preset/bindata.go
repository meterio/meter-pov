// Code generated by go-bindata. DO NOT EDIT.
// sources:
// mainnet/delegates.json (1.17kB)
// shoal/delegates.json (1.55kB)

package preset

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd3\x5b\x8f\xa2\x48\x14\x07\xf0\xf7\xfe\x14\xc4\x57\x27\x52\x55\x5c\xcb\x64\x1e\xb8\x36\x20\x28\x8a\x48\xb7\x9b\x4d\x07\x28\x10\x44\x2e\x02\x82\xcd\x66\xbe\xfb\xc6\xd9\x9e\x37\x93\x4d\x76\xe7\xf5\x5f\x39\x95\x9c\xff\x2f\xe7\x8f\x17\x8a\xfa\xeb\x85\xa2\x28\x6a\x56\x85\x65\x32\x5b\x52\xb3\x12\xc0\xd9\xb7\x7f\xa2\x90\x90\x36\xe9\xba\x47\x0a\xee\x32\x16\x81\x9e\x32\xbc\x84\xb1\x02\x14\x46\x66\x81\x88\x04\xac\x01\xc4\x11\x51\x43\xaa\x24\x24\x3a\xcf\x41\xc0\xfd\x1a\x6e\x6e\xd1\x47\x91\x7c\x3e\x86\x65\x8d\x0c\xb5\xd5\x1d\xed\xe3\x88\xca\x72\xe5\x16\x47\xb3\xb1\xb7\x8c\x8c\x69\x1b\x8c\x61\x3b\x76\x65\xe9\x41\xb2\x36\xbc\xb7\x54\x75\xc1\x20\xdf\x79\xcb\x7b\xef\xca\x5b\x30\x9e\x69\xa6\xab\xb9\x33\x5d\x56\x78\x93\xee\x2d\xc7\xd1\x9c\x0d\x6d\xf7\xbb\xd2\x73\x37\xf5\xf7\xe5\x72\x69\x07\xf9\xc5\x94\xf3\xa6\xdd\x06\x37\xac\xa4\x9b\xbb\xff\xea\x68\xf8\x02\x30\xc6\xac\x5f\x4f\xbb\xb0\x62\xf2\x3e\x69\x5f\x69\x34\x5d\x7b\x7f\xd2\xf8\x6a\x44\xee\x20\x0e\x8d\xa4\x5b\xde\x76\x3f\xb1\x69\x74\x45\x19\xe1\x88\xd1\x6e\xcd\x73\xf0\xc6\x09\x6c\xda\x4b\xd2\xf7\x5f\x5b\x0c\x75\x9f\x57\xa7\x8f\xa6\x1e\x93\x76\xb6\xa4\x20\x00\x5f\x0f\x55\xd2\x8f\x75\x5b\x7c\x3c\x3a\x9a\x2d\xbf\x4a\xa4\xa8\x59\xde\x3c\x36\x86\xe2\x02\x32\xe2\x02\xf2\x60\x01\x05\xf4\xf5\xd9\xa3\x94\xba\xed\x67\x4b\x4a\xe4\x05\xf0\x33\xfa\xf1\x42\x51\x3f\xbe\x3d\x43\x40\x4f\x11\x34\x9e\x17\x31\x03\x59\x41\x12\x18\x40\x88\x94\xe2\x04\x84\x09\x8b\x42\x55\x48\x14\x91\xe5\x78\x15\xea\x31\x07\xd4\x67\x08\x56\xe9\x78\xba\x7c\xa8\x5a\x60\x79\xfb\x9a\x77\x32\xab\xe5\xf6\xc1\xe5\x10\xae\x1a\x51\xec\xcd\x63\x36\x76\x95\xc8\x64\xd5\x38\x4a\x21\x44\xc1\xca\x6a\x4f\x96\xfd\x7e\x2a\xdf\x3a\x26\xbe\x91\x63\xad\xad\xd5\xec\xda\x1c\x02\x7b\x5f\xe3\xd2\xae\x4f\x31\x97\x1e\x07\xf6\x81\x60\xd6\xf3\x0d\x6e\x7b\xd3\x70\x76\xf2\x1c\x45\x60\x25\x55\xd2\xee\x7d\x9f\x08\x8d\x3a\x6f\x19\x9f\x51\xdb\x83\x87\x89\xab\x35\xc6\x69\x15\xdb\x6f\x5e\x43\xaa\xa2\xb8\x8b\x4d\x94\x12\x59\x99\x78\xb1\x9b\x77\x7d\x11\xc4\xe1\x79\xa7\x68\xc6\x1a\x6c\x60\x1f\x29\xec\x49\xfb\x0d\x08\x88\x41\x0b\x88\xc1\x02\x62\xfe\xbf\x20\x30\x4f\x11\x30\x60\x74\x4e\x10\x14\x1e\x08\x98\x97\xc3\x18\x45\x61\x84\xc4\x58\x80\x2a\x8c\x65\x98\xaa\x0a\xaf\xb0\x31\x0b\xf0\x33\x04\x79\x32\x3f\x73\xad\x34\x2e\xd9\xbc\xc0\xd7\x68\x4d\x9f\xb7\x41\x19\x08\x4a\xaa\x4f\xe7\xb2\x5a\x5b\x6e\xef\x1d\x94\xc6\xad\x23\x63\x0e\x0a\x1a\x4d\xa7\xde\xcd\x63\xd6\x8f\x0d\x49\x08\xf2\x4d\x4b\x82\x1d\x1f\x4a\xbe\x63\xd3\xc9\x61\x70\x0d\xba\x61\xed\x1d\xba\xff\xbc\x04\x77\xb8\xad\xef\xfb\x88\x93\x74\x43\xda\x96\x47\x23\x4b\xad\x81\xb9\x78\x20\x87\xa4\x31\x57\xeb\xc3\xed\xd3\xbf\x85\x96\x37\xe9\x4a\x5f\xbc\xd2\xc7\x8c\xe0\x35\xf0\xa5\x2c\xc1\x26\x82\xf0\x75\x6b\x03\x9c\x27\x17\x15\x3a\x86\x24\x0d\x64\xb8\xfa\x57\xda\xb8\x57\xa7\xff\x7d\x09\x0c\xb7\x80\x22\x58\x20\xc0\x2f\xa0\xf8\x6f\x08\x2f\x7f\xbe\xfc\x1d\x00\x00\xff\xff\x06\x9e\xb3\x8f\x92\x04\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0x98, 0x1, 0xd, 0x43, 0xd7, 0xa1, 0xe8, 0xb, 0xbb, 0x4b, 0xf0, 0x6b, 0x89, 0x6b, 0x77, 0xb2, 0x2, 0x98, 0x16, 0xee, 0x3f, 0x32, 0x35, 0xbe, 0x9f, 0xab, 0x3c, 0x18, 0x95, 0x12, 0xf8}}
	return a, nil
}

var _shoalDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd4\x49\xaf\x9b\x48\x17\x06\xe0\xfd\xfd\x15\xc8\x5b\xa2\xeb\x82\x2a\x6a\xb0\x94\x05\x18\x8c\x0d\x9e\x30\x1e\xf9\xf4\x29\x62\x28\xc0\x70\x31\x83\xc1\xd8\xb7\x95\xff\xde\x72\x3a\xe9\x95\x7b\x13\x65\xfb\x96\x4e\x49\xe7\x7d\xa4\xf3\xbf\x37\x41\xf8\xeb\x4d\x10\x04\x61\x70\xf1\x0b\x3e\x18\x09\x83\x56\x1a\x7c\xf9\x27\xf1\xa3\xa8\xe1\xd7\xeb\x33\x04\x77\xac\x50\x0d\x47\x3e\x26\x32\x64\x84\xf1\xb1\x82\x63\x1e\x4b\x32\xc3\x13\x49\x52\x10\x21\x08\x03\x95\x12\x46\x7e\x0d\x57\x5d\xf0\x2d\xe7\x8f\xe7\xb0\xa6\xd3\xc6\xeb\xb3\xe8\xdc\xb0\xf4\x1c\xb5\xf5\x5d\xb7\x95\x26\x08\xcc\xc6\x74\x3d\xa6\x79\x60\xc3\x68\xa6\xb6\xd5\xdd\x8e\xe6\x16\xb8\x40\x2d\x98\xf0\x19\x50\xda\xa0\x6a\x0f\xed\xcd\x52\x8e\x45\x5e\x20\x25\xb4\xfb\xca\xf4\xea\x3b\x64\x3e\xe8\x16\xb9\xcf\xc0\xd7\xd1\x68\x14\xb3\x2e\x75\xcd\x70\x7b\xdc\x68\xf9\xaa\xae\x4e\x9d\x9e\x67\x3d\xca\x8b\xf0\x56\xa8\xc6\xdc\xf4\x3b\xb2\xb0\xf6\x66\xe2\xf4\x6b\xd1\xc4\x50\xbc\x7d\xf6\xc6\x4e\x3c\x8c\x3b\xc0\xc1\x72\xa2\x15\xd6\xa4\xba\x6e\x99\xe7\x24\xb3\x9b\x5f\x7d\x56\x27\x29\xba\x9d\xed\x89\xa3\x7e\xfd\xb5\xc5\xad\x6c\xcf\x97\xe4\x5b\x55\xf6\xbc\x19\x8c\x04\x09\x80\x9f\x0f\x17\xde\xf6\x65\x93\x7f\x7b\x76\x34\x18\xfd\xec\x50\x10\x06\xe7\xea\xb9\xb1\x82\xde\x65\x05\xbd\x4b\x08\xbf\xcb\xf4\xe7\x5f\xcf\x4e\xca\xa6\x1d\x8c\x04\x8a\x09\xf8\x11\x7d\x7f\x13\x84\xef\x5f\x5e\x10\xc8\x2f\x09\x20\xd2\x74\x46\x64\x10\xa3\x88\x42\x3d\x90\x43\x1a\x91\x88\x53\xc2\xc7\x90\x06\x84\x42\x19\x02\x69\xac\xe2\x97\x04\xd3\x7a\xb8\x2c\xc2\x80\xaf\xdc\x61\x6f\xd4\x9e\x69\x9e\x56\x49\x41\xd8\xb0\x9d\xe7\xde\x03\x00\x34\x9b\x74\x28\xc9\xdc\x96\x64\x67\x7d\x18\xcf\x1b\xeb\x1a\xd9\xee\xb4\xe6\xc3\xd2\xa9\xb7\xca\x83\xd0\xb6\xc5\x53\xf8\xd9\x00\x09\xa7\xb7\x63\xcb\x87\xcb\xb6\x27\x3f\x08\x82\x65\xd5\xc7\x6e\x66\x05\xd7\x7c\x27\x85\x9f\x5a\x06\xaa\xa1\x7c\x42\x57\x00\xb3\x29\x2d\xee\xec\xb2\x17\xfd\xf4\xa8\x28\x54\x52\xa6\xcb\x8d\x09\xa0\x78\x31\xb2\xd5\x3c\x4f\xd1\x21\x5c\x26\x3b\x2e\x2f\x1c\x7b\xbf\xed\x29\x2c\x92\xe5\x8e\x5a\x1d\x61\x8b\x09\x4d\x8c\x3f\x45\xc0\xe0\xbb\x44\xa4\xdf\x30\x80\x2f\x0d\x38\x0e\x09\x94\x88\x2a\x63\xc9\x00\x48\x81\x3e\x26\x0c\x4e\x40\x68\xc8\x08\xe3\x50\x01\x34\x82\xb1\x1c\x02\xf4\xca\x40\x3d\x75\x8e\x18\x85\xd5\xd4\x5b\x93\xf8\xac\x75\x76\x0c\xa2\xa8\x65\x75\x6d\x04\x77\x9e\x0f\x15\x7d\xa2\x27\x25\x65\x24\xdc\xa0\x69\xb9\xd7\x8f\x1f\xcd\xb4\xb5\x6e\xeb\x68\x8c\x4f\x63\x6d\x81\x76\xa1\xab\xd5\x4c\xd4\x35\x93\xb1\xd9\x75\x6b\x38\x97\xd8\xf5\x7c\xe3\x69\xb0\xb6\x0f\x35\xda\x3b\xf5\xed\x88\x45\x4d\x84\x66\x73\x5b\x5d\x5c\x63\x5e\xae\x5b\x59\x4d\xed\x78\x59\x7e\xfa\x27\x74\x9e\x7d\xc2\x56\xd6\x6f\x25\x6f\xed\x48\x27\xa0\x59\x03\xa7\xdf\x52\x7c\xb8\x84\xb6\x74\xdd\xa9\x04\x2c\xac\x6c\x65\x0d\x45\xcc\x3c\xd5\x11\xd5\x3f\x66\x80\xde\x25\x20\xff\x86\x00\x7a\x29\x20\x07\x12\x00\x30\x42\x00\xeb\x10\x50\x4a\x35\x83\x06\x63\x8c\x14\xae\x20\x59\xe7\x21\x61\x18\x90\xc0\xd7\x95\x57\x02\x6b\x6d\x72\x9a\xc2\x87\xb8\x83\x9b\xc6\x5d\x1e\x82\xbe\xbe\x97\x0f\x2e\x1f\x8d\x76\x2c\x7b\xf6\x36\xa5\x5d\xf8\xe8\x1d\x87\x76\xfb\xf5\x2e\xfd\x28\x48\x59\xa5\x69\x04\xa4\xbb\x96\xe4\xa6\x66\x7d\xb8\x60\x16\xe5\xc9\x5e\x21\xe5\xc9\xed\xd7\xfc\x61\x6e\xf2\xd9\x74\xb1\x78\x0a\x7c\x6c\x0a\x63\xdc\x84\x0f\x7e\xbe\x5b\xd9\x3d\xca\xed\x0f\xcd\x3b\x18\xf3\xc7\x55\xcd\x02\xa8\xb5\x92\x72\x19\x9a\xe1\xbd\x9b\x17\x04\x60\x31\xcd\x94\xa5\xb8\x88\x86\xeb\x54\xee\x77\x5e\x55\x91\x56\x57\xfd\x6d\x9c\x4c\x02\xee\x84\x57\x63\x7a\xd8\x9a\x6c\xf5\xb1\x04\xfd\x9f\x12\xc0\xf0\x5d\xfa\xf7\x34\xff\x17\xc1\xdb\xff\xff\x0e\x00\x00\xff\xff\x39\x0b\x33\x55\x0e\x06\x00\x00")

func shoalDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_shoalDelegatesJson,
		"shoal/delegates.json",
	)
}

func shoalDelegatesJson() (*asset, error) {
	bytes, err := shoalDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shoal/delegates.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x16, 0xe5, 0x24, 0x79, 0x26, 0xe7, 0x34, 0xd7, 0x5f, 0x60, 0xc5, 0x71, 0xd8, 0x87, 0xc4, 0x46, 0xed, 0x99, 0x77, 0xc1, 0xa2, 0x28, 0xb3, 0xb3, 0x9c, 0xc3, 0xc3, 0xec, 0x5c, 0xd0, 0x70, 0x22}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mainnet/delegates.json": mainnetDelegatesJson,
	"shoal/delegates.json":   shoalDelegatesJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": {nil, map[string]*bintree{
		"delegates.json": {mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"shoal": {nil, map[string]*bintree{
		"delegates.json": {shoalDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
