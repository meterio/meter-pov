// Code generated by go-bindata.
// sources:
// compiled/ScriptEngineEvent.abi
// compiled/ScriptEngineEvent.bin
// compiled/ScriptEngineEvent.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledScriptengineeventAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\xc1\x6e\xe2\x30\x10\x86\xdf\xc5\xe7\x9c\x58\xed\x1e\x72\x5b\x60\xb7\xed\x81\x52\xb5\xa0\x1e\x10\x07\x13\xff\x80\x45\x32\x8e\xc6\xe3\x50\x84\xfa\xee\x55\x10\x2a\x54\x0a\x88\x94\xaa\x29\x12\x47\x4b\xf3\xd9\xfe\x3f\x7b\xec\xd1\x5a\x69\x72\xb4\xca\x5c\xf0\x2a\x9e\xea\xd4\x23\x52\x96\xf2\x20\x5e\xc5\xa3\xb5\xb2\x64\xf0\x02\xa3\x62\xe1\x80\x48\x91\xce\xa0\x62\xe5\x96\x04\x56\x91\x92\x55\x5e\x0e\xb5\x31\x0c\xef\xd5\x6b\xb4\x07\x6c\xe7\xda\x12\x3a\x73\x81\x64\x87\x04\x4b\xd2\xfa\xfd\xe7\x18\x22\x6e\x01\xaa\x20\xc6\xef\x15\x6d\x17\xc8\xec\x2a\x50\x80\x64\x33\xe3\xe5\x46\x1a\xd2\xa4\xd1\x50\x93\x90\x2c\x20\x77\xdd\x1d\x34\x59\x09\xfc\xaf\xd6\xb7\x9b\xb8\xd7\x62\x0b\xb4\x37\xfb\xe9\x22\x77\xde\x4a\x63\x56\xa6\xec\xb2\xf6\xa2\x41\x2d\x87\x09\x46\x62\x73\x8b\xfd\x75\x4e\x08\x24\xee\x50\x9c\xea\x03\x78\xb6\x32\x37\xac\x97\xd7\x7b\xf9\x41\x4b\x3f\xdf\x2f\xfe\x39\x4a\xaa\x77\xdb\x49\x9d\xc7\xb5\x87\xce\xef\x86\x1e\x78\x76\x15\xf9\x05\x22\x07\xac\xc9\x4f\xc1\xff\x2f\xee\xcb\x2b\x0f\xa1\xa3\xc9\x58\xa3\x05\x35\x9f\xde\x63\x5c\xb5\xa7\x61\x5e\x96\x57\x70\x67\xa9\xb2\xa6\x56\x64\x2f\x9a\xe5\x16\x76\x36\xaf\x77\x8d\x40\xe6\x13\x54\x26\x3c\xeb\xd3\xdf\x90\x88\x75\x75\x7f\x44\x0f\x2e\x60\x1e\xd8\x26\x38\xe1\x29\xdf\xae\xf1\x54\xc6\x6b\xc6\x2c\x23\x81\x2d\x60\x7a\x83\xc7\x9a\x49\x53\x68\xbf\xe1\x6e\x6a\x81\x3a\x91\xa0\xd3\x9a\x82\xfe\x55\xf4\xe8\xf8\x2d\x00\x00\xff\xff\xf5\x2a\xdd\x0b\x40\x0c\x00\x00")

func compiledScriptengineeventAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledScriptengineeventAbi,
		"compiled/ScriptEngineEvent.abi",
	)
}

func compiledScriptengineeventAbi() (*asset, error) {
	bytes, err := compiledScriptengineeventAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ScriptEngineEvent.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledScriptengineeventBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcb\xc1\x11\x03\x31\x08\x43\xd1\x96\x64\xb0\x04\x2e\x87\xc5\xa1\xff\x12\x32\x7b\xc8\xe4\xa2\x83\xe6\x7d\x21\x21\x6c\xd0\x7c\x27\x16\x05\x0c\x43\x00\x12\x73\xf9\x10\x82\xf3\x35\xeb\xbe\xaf\x9f\x77\xc7\x81\x7f\xf9\xd3\x40\x2d\x51\x16\x15\x15\xe6\x60\x1a\x3c\x2c\xc8\x5a\x4c\x1e\x9d\x84\xf7\xc7\xb4\xac\x0f\xa7\x57\x8f\x4f\xb4\x5d\xe7\x73\x77\x95\x54\x76\x42\xda\x5b\x15\xca\xb6\x94\x00\x3b\xdf\x00\x00\x00\xff\xff\xb0\x2e\xa0\xa9\xa4\x00\x00\x00")

func compiledScriptengineeventBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledScriptengineeventBin,
		"compiled/ScriptEngineEvent.bin",
	)
}

func compiledScriptengineeventBin() (*asset, error) {
	bytes, err := compiledScriptengineeventBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ScriptEngineEvent.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledScriptengineeventBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x01\x01\x44\x21\x08\x03\xd0\x4a\x73\xba\x01\x71\x38\x3c\xfb\x47\xf8\xcf\x48\x18\x07\xa2\x01\x24\xde\x05\x7a\x59\x66\x74\x74\x70\x43\x49\xec\x60\x48\xbd\x94\x2a\x57\x62\xcf\x9f\x5e\x9c\xd2\x9b\x35\x6f\xbf\x18\xde\xad\xdf\x3d\xdd\x76\xb3\xc2\x3e\xc7\x1d\xce\x61\xda\x00\xeb\x0b\x00\x00\xff\xff\xf7\x0a\x9c\xae\x6a\x00\x00\x00")

func compiledScriptengineeventBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledScriptengineeventBinRuntime,
		"compiled/ScriptEngineEvent.bin-runtime",
	)
}

func compiledScriptengineeventBinRuntime() (*asset, error) {
	bytes, err := compiledScriptengineeventBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ScriptEngineEvent.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/ScriptEngineEvent.abi": compiledScriptengineeventAbi,
	"compiled/ScriptEngineEvent.bin": compiledScriptengineeventBin,
	"compiled/ScriptEngineEvent.bin-runtime": compiledScriptengineeventBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"ScriptEngineEvent.abi": &bintree{compiledScriptengineeventAbi, map[string]*bintree{}},
		"ScriptEngineEvent.bin": &bintree{compiledScriptengineeventBin, map[string]*bintree{}},
		"ScriptEngineEvent.bin-runtime": &bintree{compiledScriptengineeventBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

