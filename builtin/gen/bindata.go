// Code generated by go-bindata.
// sources:
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Extension.abi
// compiled/Extension.bin-runtime
// compiled/ExtensionNative.abi
// compiled/ExtensionNative.bin-runtime
// compiled/Measure.abi
// compiled/Measure.bin-runtime
// compiled/Meter.abi
// compiled/Meter.bin-runtime
// compiled/MeterGov.abi
// compiled/MeterGov.bin-runtime
// compiled/MeterNative.abi
// compiled/MeterNative.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin-runtime
// compiled/Prototype.abi
// compiled/Prototype.bin-runtime
// compiled/PrototypeEvent.abi
// compiled/PrototypeEvent.bin-runtime
// compiled/PrototypeNative.abi
// compiled/PrototypeNative.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x3d\x6f\xdb\x40\x0c\xfd\x2f\x9c\x35\xb5\x45\x51\x68\x33\xd2\xa5\x43\x01\x4f\x5d\x82\xc0\xa0\x75\x4c\x7a\xa8\x4c\xaa\x77\x3c\x25\x42\x90\xff\x5e\xc4\xd2\xf5\x24\xeb\xa3\x6e\x6a\x58\xe8\x66\xc0\x8f\x4f\x8f\x8f\x8f\xbc\xdb\x67\x28\x84\xbd\x22\x2b\xe4\xea\x02\x65\x60\xb9\x0a\xea\x21\xbf\x7d\x06\xc6\x03\x41\x0e\x90\x81\x36\xd5\xeb\x2f\x34\xc6\x91\xf7\xf0\x72\x97\xc5\x3f\xb1\xaa\x9c\xd4\xe4\x3c\x64\x20\x41\x4f\x6b\xad\x21\x56\xab\x4d\xe2\xd8\x37\x4a\xfe\xfd\x3b\x78\xc9\x12\x88\xb7\xf2\x48\xae\x87\x11\x29\x8f\x1f\xa9\xb0\xc1\x7d\x49\x90\xdf\x63\xe9\x29\x03\xaf\xa8\xf4\x35\x28\xee\x6d\xf9\xca\x9a\x43\x6d\xe9\x31\x15\xde\x07\x2e\xd4\x0a\x1f\xd9\x67\x3b\x1b\xab\xbf\x91\xc0\x3a\xdd\x41\x22\x0f\x96\xf5\xd3\x25\x65\x75\xd5\x63\xc7\x77\x51\xd7\xa2\xf5\x8e\x6a\xf9\x41\x9b\x04\x4d\xea\xcf\xd2\xc8\xc2\x11\xf4\x97\x06\x4e\x98\xf3\x7b\xac\x49\x5f\xe5\xa4\x12\x8f\xe5\x4c\x34\xd4\x1e\x68\x7b\x84\x90\x19\x9a\xfc\xf1\x43\x3f\x1d\x2d\xcd\xa4\x17\x09\xf4\x33\x88\x0b\x87\xd1\xac\x12\xa0\x75\x14\xcb\x38\xe9\x39\x1c\x3d\x51\x11\xb4\xaf\xa8\x0d\x63\x42\x28\xba\x07\xd2\x45\x35\x06\x15\x4f\xac\x59\x3d\x37\x49\xdd\x6e\x61\x29\x7b\xab\x61\xcc\x55\xa2\x35\xdf\xcc\x19\x46\xef\xe6\x9c\x1e\x66\xe7\x4f\x9b\xdd\x6f\xff\x4a\xcd\x15\xc2\xea\xb0\x98\x6a\xaf\x37\x03\x55\x2c\xbe\x7f\x13\xb5\xfc\x70\x93\x0a\xd6\x18\x46\x5c\xe6\x2f\x9f\x97\x53\xd3\x46\x66\x25\x91\x67\x99\x6a\xe8\x7f\x33\xb5\xbb\x49\x2b\x5f\xf8\x09\x2b\xeb\x81\x89\x33\x77\xfe\xd2\xcf\x3a\xb2\x70\x73\x90\xe0\xa7\x9c\xb5\x6c\xe8\x89\x4c\xec\xe7\xe4\x25\x9a\xf4\x39\xeb\x55\x75\x84\x31\xcc\xed\x47\x97\x46\xb3\xed\x98\x13\x88\x6a\x62\x7d\xab\xd0\xe5\xfb\xfd\x76\x99\x9b\x11\xef\x3f\xc9\x8c\x7b\xb6\x31\xe6\xe2\x52\x47\x8b\x39\x14\x7c\xf7\x2b\x00\x00\xff\xff\xa9\x52\x06\x45\xb3\x0a\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x09\x92\xf2\xb8\x0e\xbe\x92\x16\x6b\xf1\x71\x12\xc7\xbe\xff\x11\x5e\x79\x09\x84\x0e\x10\x42\x4f\xd3\x3d\xf5\xa6\xa9\x1f\x28\x93\xd8\xb2\xd6\x4f\xb2\xf2\x2b\x38\x28\x04\x10\x52\x80\xc0\x8a\xa0\x08\x30\x15\x31\x05\x00\x16\x4b\x80\xf0\xe6\x5f\x04\x08\xca\x65\xfc\xa1\x3a\x28\xc3\x84\x21\x70\x44\x0c\x75\x9d\x39\x88\xd5\x51\x24\xcf\x71\xce\xda\x46\x11\xf3\x18\xf5\x05\x39\x17\xeb\xa3\xa1\xf4\x51\xa6\xbc\xc8\x8c\xd4\x47\x23\x8d\xd1\x5c\x20\x41\xcc\x6d\x94\xf2\x18\x8d\x4b\x70\xf4\xe0\x6d\x94\x99\xfb\xe8\x84\x65\x56\xf5\xd2\x47\x17\x1f\xa3\xc2\x13\x4e\x4b\x1f\x0d\x38\x8f\x51\xe7\x99\xe7\xa5\xcf\x10\x42\xea\xa3\xd9\x04\x0b\x59\xdf\x45\xf0\x41\x59\x99\x40\x2d\xd2\xdc\x47\x13\x88\xc9\x5c\xb9\xe8\x50\x16\x99\x39\x38\xa0\xd4\x5d\xd7\x5f\xae\xe3\xd2\x38\x5e\xa4\xf2\xdf\x81\x15\xd8\xeb\xbe\xc0\xc1\x2b\xff\x2f\xfc\x3b\xfa\x43\x8d\xa0\x40\x50\xef\x8d\x14\x31\x82\xb4\x97\x22\x08\xce\xa2\x95\x96\x00\x82\x0e\xce\x75\x75\x8c\xa8\xeb\xa7\x63\x95\x7f\xbd\xd7\x09\xa5\xbf\xae\x63\x91\xc6\x4c\xe3\xfe\x88\xc0\x11\x0a\x6f\xf6\x84\x34\xed\xf6\x84\x5c\xd5\x49\x42\xba\x59\x9b\x14\x2a\xad\xfd\x7d\xb3\x06\x1e\xad\x20\xf3\x7e\x85\xba\xe3\x9f\xe3\x9a\x94\x4a\x39\xc0\x96\x8a\x98\xf7\x54\x24\xbc\x4f\xc5\xca\xdd\x87\x2b\x98\xd9\x0d\x6f\x5c\x6d\x4f\xdf\xbd\xb1\x8d\xbc\xec\xcc\x5e\xcf\x5c\xbb\x59\x43\xef\xcb\xcc\xe5\xc1\x78\xd8\xeb\x90\xf3\x07\xe8\x84\x55\x87\x1d\x81\x9d\x84\x9c\x1d\x1d\x05\x6f\xf5\xcc\x41\xf0\x2a\x93\x6a\x0f\xdd\x22\x64\xae\xd7\x63\x97\x34\x4d\x58\xad\xda\x09\xda\xfd\x1e\x60\xcc\xd1\x25\xdc\xe4\x47\xae\x55\x7e\x32\x24\x1a\xdb\x3f\x1f\x7a\x89\xcd\xe3\xf5\xb9\x52\x1e\x73\x71\x5d\x5b\x1b\x3f\xda\xfa\xd5\x42\xaa\x7f\x9d\x80\x6f\xed\xb0\xd9\xc3\x2c\x10\x7d\x9d\xfd\xfa\x7a\x62\x25\x94\xf7\xfa\xc9\xfc\x40\x3f\xbf\x63\x25\x2f\xe9\xb7\xa7\xb4\xb3\x20\xe6\xb2\xa7\x70\x9e\x7e\x86\xc2\x8d\x94\xa9\xea\xc7\xcd\x48\x8b\x7c\x58\x00\x9b\x54\x2b\x37\x03\x0c\xee\x77\x0e\x77\x59\xf6\xe8\xe8\x10\x79\xcc\x8b\x5b\xad\x76\xae\x72\xf5\xc0\x56\x57\xe8\x5e\xec\xa2\x0f\xd8\xee\xa0\x0d\x47\x92\xdb\x57\x6f\xf8\xc8\x13\x1f\x7a\x44\xce\x61\xc7\xc9\x80\xf1\xe7\x3c\x22\xd2\x22\x3b\x79\x06\xb2\x3d\x15\xe1\x81\x3c\x8f\x34\x06\x25\xf0\x7e\x05\xf1\xfd\x0a\xbe\xfc\xe0\x3e\xa3\xe1\x9e\x8a\xb8\x8f\x3f\x61\xce\x6f\xee\x73\xa6\xb8\x5f\x21\xa5\xdd\x0a\x02\x3f\x60\xbb\x2b\x15\x04\xe4\xb7\xda\x78\x27\xf6\x3f\xd0\xc2\x4a\x67\xbd\xa2\x5a\x46\xf3\x9d\x54\xaf\xa9\xdf\xa8\xbd\xd7\xfb\xea\x4a\xfd\x57\x40\x09\xb1\x7f\x6f\x16\x55\xb1\x61\x1d\x59\xbd\x5f\x43\x8a\xd0\x69\x15\x70\xea\x54\x3d\xbf\xd2\x9b\x8c\x2a\x8f\xd4\xea\x5e\xc2\xd8\x4b\xe5\x9f\xd3\xcf\x47\x9b\xea\x09\xe4\xe2\x2f\xc6\xbe\x0f\x76\x57\x79\x5b\x21\xb6\x34\x04\x58\x79\x6a\x05\x3c\xb1\xc5\xe9\x5d\x90\x3d\xa8\x80\x50\xfd\xdb\x3e\x02\x2a\x50\xd8\x46\x48\x2b\x4a\x26\x1a\x35\x59\xd0\xa8\x99\x27\x02\x13\xcd\x3a\x6b\xd6\x62\xa6\x99\x40\x8b\x11\x81\x91\x8a\xa9\x16\x9d\x55\x34\x10\x28\x1a\x18\x18\x5d\x67\xb3\xa2\xc5\x54\xc5\xe8\x3b\xb4\x77\xed\x7a\xa0\x69\xcb\x2a\xd1\xf6\xfe\x01\x0c\xf1\x4c\xaa\xab\x3c\x1d\x25\x38\x56\x89\x02\x75\x2b\x77\xae\x92\x05\x42\x8b\x20\x22\xb0\xea\x6e\x8d\x15\x0f\xf5\x77\x58\xa3\xb6\x55\x81\xdb\xf7\x27\x2b\xf4\xbb\xae\x6b\x74\x04\x09\xea\xc8\x70\x66\xaf\xd5\x56\xf2\x12\xa1\xad\xb7\xc9\xce\xaa\xf5\xf8\xa9\x99\xac\x98\x01\xa2\xa4\x25\x9b\x64\x85\x82\x36\x93\xca\x62\x19\x92\x64\x8e\x49\x6c\x9a\x0b\x05\x9e\x13\xa3\x26\xcb\x92\xa8\xf8\xe2\x82\x66\xb8\x4c\x3a\xa5\x8b\xe7\x01\x2b\xb7\xfa\xf6\xbe\x2e\x75\x29\x7e\xd5\xa4\xa9\xe6\x30\xdd\x3f\xf0\x19\xbf\xf5\xc0\x9a\xef\x60\xf2\xb8\xbd\xc7\xf7\xf7\x9c\xf3\xd8\xd7\xb9\x30\x3d\xf6\x95\x9b\xab\x96\x97\xae\xca\x07\x57\x3d\xf4\x5f\x6f\x50\xdf\x10\x97\x84\x86\x76\x1b\xe6\xad\xfe\x6f\xcc\x49\xc0\x0d\xf3\x50\x6c\xd1\xed\x14\x0e\xdb\xa3\x30\x7a\x75\x9d\x36\xee\xa9\x57\x07\x2a\x42\x6f\x28\x35\x56\x04\xd3\xae\xaf\xb9\x80\x84\xba\xbe\xb3\x50\xc4\x35\x06\x8e\xbb\xaa\x85\x34\x94\x17\x2f\xba\x43\x43\x77\x62\xcd\x1e\x9a\xd5\x0a\xc5\xc1\xc9\x35\xee\xd6\x59\xb1\xcd\x31\x89\x98\x57\x5a\x78\xe4\x07\x1d\x33\xce\x1b\xcc\x58\x75\xcf\x46\x64\xf3\x25\x7c\x89\x6c\xa7\xe2\x1a\x8e\x3c\x4c\x11\xa2\xf2\xe7\x22\x0e\xc6\xa3\x88\x53\x3f\x4d\x15\x35\x69\xdc\xc6\x96\xfb\xf1\xe4\xc6\xb2\x9f\x44\x89\xc6\x75\x6a\x3a\xd0\x85\xb6\xd9\x7f\xfe\xdb\xfb\x8f\x1a\x54\x34\xd7\x2b\x2c\x58\xfc\xce\xfe\x07\x02\x3a\x65\xb1\xff\x60\xac\x6c\x58\xef\x56\x02\x8a\x30\x4d\x9f\xe4\xbf\x1f\xf2\xff\x8b\xbe\x11\xa8\x98\x6b\x34\xb6\x60\x7c\x6f\xbd\x63\xfe\x97\x72\x84\x58\x07\x06\x84\xc1\x93\x99\x96\x0f\xf2\x64\x3e\x44\x81\x41\x8b\x16\x02\x5d\x14\x35\x5b\xdc\x73\x69\xcb\x99\xd7\x78\x12\x46\xad\x65\xeb\xbf\xaf\x39\xef\x8d\xf6\xe0\x9a\x77\x08\xfc\xb6\x06\xaf\x35\x9f\xae\xcd\xdd\xd7\x77\x14\x26\xd2\x62\xd4\xf5\xf7\xd3\xc8\x30\x8e\x0a\xce\x39\x7c\x38\x62\xce\x59\x74\x98\x50\x9c\x4e\xa3\x43\x42\x7e\x80\x0e\xf1\xf7\xd0\xa1\xa2\x86\xe6\x23\xdf\x40\x86\x3b\x7d\xbd\x8f\x0e\xe1\x9a\x3f\xb6\xf7\x53\xfa\xb7\x89\x35\x0b\xc6\x0f\xda\xb5\x9d\x8d\x35\x16\x14\x8d\xd4\x54\xec\x0e\x2f\xcf\xc4\x9a\x17\x7c\x1d\xae\x3c\xf9\xa8\xff\x97\x43\x9e\xe4\xe6\xe9\x9e\xf8\xb7\x77\x78\xe2\xc0\xbf\x9c\xa1\x3e\xf6\x25\x8a\x90\x83\x8a\x35\xdf\xd3\x3c\xf0\xaf\xd1\xfa\x90\x4a\x99\x87\xb6\xe4\xfc\xc9\xfa\xc8\xf2\x06\x5a\xe8\x15\x12\xd5\xd2\xaf\x52\x23\x50\xd6\x52\x11\xdc\xb6\x3e\x62\xa4\xa8\x6c\x61\x54\x53\xb0\xce\x5c\xbf\xbd\xea\xc5\x5e\xa9\x8f\x04\x62\xee\xa3\xd7\x6c\xe3\xd5\x73\x24\xf3\x37\x4e\x77\x47\x05\x08\xbc\xf2\xf1\xa7\x74\x48\x9f\x9d\x3b\x0f\x0a\x30\x7c\x3d\x9b\xec\xe7\x33\xce\xc0\xc0\x6b\x26\x16\x46\x8e\xdf\x2b\x9c\xf7\xce\x7e\xaa\xf5\x52\x8d\xd4\x2b\x32\x2b\x93\xd5\x0c\x51\x70\x68\x08\xac\xb5\xfd\x9b\xf3\x9f\x76\x0f\x70\xa5\xa0\xde\x73\xad\x5a\xee\xcf\x76\xbc\xe6\x04\x24\x58\x6d\xc3\x43\xfb\x04\x27\x34\x17\xa1\x9b\x13\x03\x90\x07\x92\x6e\x19\x26\x0c\xcf\xcb\xbd\x1a\xf6\xe4\xec\xe0\x01\x32\x7f\xbd\x9a\x71\x6f\x6c\x45\xf3\x2d\x91\xfd\x9c\x37\x2f\x87\xf6\x19\x4c\x0c\x5a\x7c\x63\x45\x0b\xbd\x5e\x39\x2c\xb6\xda\x2a\xd7\xe8\xd7\xb3\xac\x57\xbd\x79\x86\x7b\xb5\x87\x40\xcf\x4f\x63\xcf\xf9\xd4\x8d\x8c\xb0\x86\xc8\xc3\x98\x8a\xc4\x1c\xbb\x96\x7d\xb9\xbf\xe9\xc5\x7e\xec\xcb\x19\xec\xa9\x53\x83\xed\x79\xee\x05\x97\xbf\xa9\x79\xb7\x88\xfa\x0e\x62\xde\x71\x75\x83\x6c\xef\x70\x7c\x5b\x69\xa5\xfd\xec\x7e\x3b\xfb\xeb\xbb\xbe\xae\x7a\x86\x53\x5b\x6a\xc2\x8e\x1a\x4c\x67\x70\xbb\x82\xee\x67\x58\xce\xcd\xe0\xfb\x19\xf2\x99\xda\xf5\x74\x98\xe1\x7c\x92\xa3\x69\x4b\x0d\x75\xaf\xbd\xf5\xe1\x8a\x48\x3a\x8f\x5c\x09\x89\xc5\xfb\x99\x7c\xcf\xb4\xfc\x92\xbd\x59\xb1\x25\xce\xa9\x48\xd2\xb4\x4c\x4b\xe6\xe8\x93\x86\x09\x18\x84\xa7\xe8\xe4\x82\x29\xe5\x89\x60\x49\x4e\xb6\xcc\x09\x19\x4c\xc2\x1c\xb3\x79\xb2\xc4\x38\xdd\x54\xab\xb7\xde\xe5\x8d\xac\xe4\x28\x1f\x71\xe8\xbe\xa9\xee\xeb\x92\x9b\x20\xd2\xb2\x7c\xa9\x08\x9e\xca\xc9\xae\x59\x0a\xd6\xb8\xf5\x39\x8c\x85\xa7\x2b\x62\x03\x4d\x5d\x11\x54\xcf\x00\x1b\x8e\xe2\x1b\x8c\xf5\x00\xb5\x9f\x95\xc4\xc1\x19\x14\x9d\xaf\xbf\x7e\x02\x33\x5f\xe4\x19\xec\x83\x31\x99\x0e\x2b\x9c\xf7\xb1\xf1\x8d\x34\x53\x43\xc2\xa8\xc1\xe2\x56\x9e\x0d\x6f\x87\x9a\xa5\x2a\xab\x9f\xb7\xad\x17\xe5\x89\x17\x99\xfe\x5a\x1e\xf4\xba\x4f\x3e\x7b\x2e\x57\x42\x9a\x25\x04\x9e\xb3\xaa\x16\x37\x9a\x93\x4f\x26\x14\x39\xc7\x98\x89\x20\x4c\xd5\x8c\xb2\xe4\x99\x17\x5a\x82\xcb\xe2\xaa\x85\x32\x72\xb2\x3c\x85\xdb\xca\xcb\x77\xa4\x71\xe2\x5c\xee\x37\x91\xed\xa8\x53\xa0\x14\xfb\x53\x35\xd9\x3d\x86\xcd\xd5\xae\x08\xaa\x5c\xdb\xb9\x7d\x78\xc0\xe9\x7f\x65\x9d\x62\x48\x41\xe7\x4f\xe6\x17\xd3\xf9\xfc\xff\x59\x36\xff\x92\x14\x08\x22\x4f\xfe\x8b\x1a\x1f\x08\x2e\xf9\x2e\x9a\x7d\x10\x0b\x1c\x9f\x8e\xdd\xd1\x7a\x31\x37\xb8\x5f\x3b\x79\x51\xeb\x3b\x9f\x9f\xf5\xdb\xdd\xe3\x33\xf7\xef\x7f\xaf\x56\x76\x89\xfb\xfe\xc9\x5e\xa2\x63\x5b\xb9\x23\xbb\x1b\xeb\x79\xc3\x56\x3a\x3f\xde\xb3\x93\x5f\x97\xdf\xa9\x9e\xa1\xf7\x74\x74\xe4\x88\x3f\x79\x96\xf4\x53\x59\xd4\x33\xdd\x78\x55\x5f\x5f\xc0\x16\x88\xd1\xe2\x4d\xde\xf4\x87\xd1\xbc\x62\xe5\xd1\x07\xb1\xfc\xe1\x69\xc9\x21\x96\x5f\x31\x49\x43\x8a\x37\xfd\x81\x6f\xa3\xc6\x5b\xf9\x1e\xf5\x07\xfe\x87\xe5\x5f\xc4\xf2\x41\xe5\xff\x06\xcb\xcf\xcb\xdf\xea\xaf\xf8\x09\x2c\xff\x9d\x88\xf1\xb0\x17\xf0\x82\x2d\x92\xe5\x3f\x8e\x2d\xc4\xaa\x1e\xb3\x89\xed\x7a\x03\xfe\x85\x38\x7c\x61\xfd\x0f\x87\x3f\xd1\xd8\x87\x9d\xb0\xeb\xfb\x77\xa4\xf8\xb8\x83\x76\xdb\xb7\xd5\xe4\x94\xe1\x93\xf9\xe9\xb1\x67\xa9\x99\x68\xb1\x3a\xbe\xf4\x6e\x7e\xeb\xe7\x60\xd1\x58\x55\xe3\xad\xac\x7e\x1c\x73\xbf\x71\xe2\xf0\xa6\x56\xfc\x23\xdd\xca\xa7\x4e\xa5\xdf\xe5\x09\xad\xbd\xcc\xe3\x0c\xfa\xe5\x6e\x65\x2c\x18\xb7\xdd\xca\x98\xdb\x13\x7e\x07\xdd\xca\xed\xae\x6f\x76\x2b\x63\x2e\xe9\x71\xb7\xf2\xaa\x39\x00\xd7\xa7\x8a\x81\xfb\x89\x93\xab\x4c\x65\xe8\xd6\xb0\x98\x92\x3e\xd8\x13\xf5\xc2\x13\x2f\xcf\x23\x49\xac\x08\xf7\xf2\x04\x8c\xdc\x76\x74\xec\x23\xcd\x59\xda\x8f\x10\xed\x8f\x65\x5b\x4f\xa2\xe5\x19\xda\x0f\xd1\x5f\xe3\xd6\xb3\x27\x2c\x9e\x3d\xd1\x75\xae\x5f\xf1\x5c\x66\xbf\x76\x30\x10\xe4\xf9\x2f\x21\x9b\x1b\xc9\x94\x7f\xa2\xc2\x58\x39\x69\x45\xba\x9e\xd7\x39\x83\x45\x03\x95\x73\x3b\x33\x3b\xdb\x1f\x74\xd6\xfb\x2a\x13\x45\xf2\x45\xe7\xfe\x14\x76\xdb\x07\x6f\x3b\x4f\xbf\xf3\x3f\x50\x5c\x7a\x95\xba\x6c\x3e\xf1\x0c\xfa\x27\x6a\x0a\x97\x9e\xa7\xbb\xde\xd7\x1c\x78\x46\xe9\xf1\x83\xb0\x7c\x79\x3e\xb7\xfa\xe6\xcb\xaf\x04\xb3\x18\x2f\xe3\x54\x20\xf7\x6f\xe3\xba\xeb\xeb\x5f\xa3\x4b\x9e\x26\x9e\x43\xf0\xff\x74\xe9\xd5\x35\x4e\xe9\x12\xe3\xf2\x44\x97\x98\xf1\x35\x5d\xda\xd4\x07\xa8\xe1\xa0\xe1\xff\xfb\xd3\x3b\xc3\x43\xb3\x80\x58\xc9\x32\x43\x88\xfd\x59\xfa\x71\xf7\xab\xf8\xe9\x1e\xea\xb9\x3e\x67\xd6\x10\x56\xfb\xff\x63\x9c\x56\x6c\x45\x1c\x63\xef\xfb\x6b\xf4\x54\x54\xc7\x5e\x57\x30\x17\x69\x34\x25\x5b\x29\x80\xd1\x1b\x53\x7f\x71\xc2\xf5\x57\x8b\xd8\xba\x55\xea\x35\x88\x38\xc6\xab\x7b\xa7\xd6\x4d\x28\x57\x94\xb6\xc1\x5d\x48\x3c\x35\x8f\xbd\xf6\xad\xd4\x91\x25\xac\x1d\x2d\xcb\xb5\xa3\xa5\x55\x33\x89\xcb\xd4\xf8\x31\xb7\x2e\xc2\xb1\x4a\xd1\x21\x9b\x15\x13\x8f\xe7\x50\x01\xdb\x1c\x79\x3b\x47\x7d\x07\x98\x50\x45\xc9\x26\x9b\x8c\x18\xc4\x09\x4c\x8b\x48\x09\xa2\xbc\x58\x80\x18\x22\x72\x5c\xd8\x0b\xcf\xc1\x84\x4b\xc9\x29\x2a\x72\x0a\xd9\x64\xa1\x18\x93\x86\x79\x81\x25\xda\x94\x79\xf2\x49\xa8\xb2\xfe\x7f\x01\x00\x00\xff\xff\x5f\xc8\x14\x66\x52\x48\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd3\x41\x4b\xc3\x30\x14\x07\xf0\xef\xf2\xce\x39\x4d\x1d\x92\xa3\xe8\xc1\x83\x20\x6e\xe0\x61\xf4\xf0\xd2\xbe\x4a\x68\x9a\x84\xe4\x65\x2e\x8c\x7d\x77\x69\x99\x5b\x0f\xe2\x2a\xa2\xed\xad\xd0\xfc\x79\x3f\xfe\xbc\xb7\xd9\x43\xe9\x6c\x64\xb4\x0c\x92\x43\x22\x01\xda\xfa\xc4\x11\xe4\xa6\x10\x60\xb1\x25\x90\xc0\x8e\xd1\xac\x92\xf7\x26\x83\x00\x97\xf8\xf8\x62\xff\xf9\x00\x04\x70\xf6\xdd\x57\xd2\x96\x17\x37\x4b\x38\x14\x02\x3c\x66\x54\x86\x40\xd6\x68\x22\x09\x88\x8c\x4c\x4f\x89\x51\x69\xa3\x39\x83\x84\xad\xa6\xf7\x73\xb6\x4e\xb6\x64\xed\x2c\x1c\xc4\x37\xac\xd3\xd0\x0a\x19\xcf\x61\x95\x99\x62\x3f\xf6\xf8\x5b\x19\x6c\x68\xa1\x3a\xcc\x05\x73\x1f\xbd\x5a\xfc\x87\xd9\xa6\xf6\xeb\xae\x4e\x68\x57\x36\x6b\xdd\xd2\x8c\x7a\x1e\x65\x5e\xe9\x37\x4b\xe1\x92\x1a\xab\x2a\x50\x8c\xb3\x51\xaf\xfb\xc5\x2e\x5d\x18\xd5\xf7\xf2\xfa\x0f\xe1\x83\x6b\xdb\x3d\xec\xbc\x0e\xd8\x67\x26\x5f\x83\xa1\xeb\xf1\x7e\xfa\x53\x1a\x7a\x9e\x83\xdb\x52\xf5\xea\x42\x33\x7d\x4f\x3f\x5b\xbc\xb9\x35\x79\xd7\xa1\x5e\xa8\x1e\xa5\xba\xfd\x25\xaa\xf8\x08\x00\x00\xff\xff\x20\x8c\x4d\x0b\x76\x06\x00\x00")

func compiledExtensionAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionAbi,
		"compiled/Extension.abi",
	)
}

func compiledExtensionAbi() (*asset, error) {
	bytes, err := compiledExtensionAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x0d\x52\xeb\x3c\x0c\xbc\xd2\x4a\xb2\x6c\xe9\x38\xfe\xbd\xff\x11\xbe\x71\x9c\x02\x6d\xf8\xca\x4b\x1e\xaf\x0c\x61\x18\xe8\xc6\xd6\xcf\x6a\x2d\xb9\x11\x86\x88\x00\xe5\x08\x04\x89\x84\x48\x40\x0e\x9a\x22\x00\xd1\x54\x41\xb8\xf8\x38\x10\xa2\x8c\xfd\xa1\x68\x88\x42\x46\x11\xad\x35\x0a\x9b\x1f\xd7\x34\x51\x49\x1c\xd4\x28\x2c\xb4\x85\x1d\x2d\x86\xde\x33\x6f\x28\xe9\xbe\x36\x60\xf8\xc8\xa3\x2f\xd4\xf3\x8e\xd2\x70\x24\xa6\x0d\x65\xa4\x85\x46\x68\x1b\xea\x75\xa1\x5a\x17\xea\xb9\xaa\xb4\x52\x16\x6a\xfb\xda\x5a\x46\x6c\xad\x2e\xbb\x5c\x76\xbb\x4d\x39\x75\x09\x2b\x32\xee\xba\xd0\x6e\x50\x35\x59\xde\x84\xbb\x26\x2d\x93\x2f\xc3\x68\x5a\x24\x18\x48\x67\x26\x45\x17\x8f\x0b\xd7\x8d\xdb\xd2\xe7\x1e\x1b\x1a\xe7\x9e\x00\x25\x83\xb1\xd1\xac\x00\x03\xe4\xa4\x50\xdc\xde\x38\x41\x1c\x43\x3e\x5a\xed\x38\x58\x25\x99\xfe\x83\x41\x22\xc4\x26\x2f\x30\x18\x44\x1d\xbb\x55\x18\x83\x1e\x90\xad\xf6\x34\x40\x13\xd9\x7c\x05\xec\x51\x2c\xff\x8e\x69\x6b\xe9\xc3\xe0\xe2\xec\x1b\xf6\x1e\xad\x89\xc9\x16\x7f\x90\x34\x3d\xac\xe8\x6f\x3f\x4e\xdb\x0e\xf6\xfd\x73\x24\x04\xd1\xfb\xcc\x67\x26\xe4\x14\x6f\x7f\x4f\x30\x41\xf1\xc8\x2f\x59\xf8\x8a\x89\x95\xc5\x5b\x44\x1a\xda\xe5\x5a\x50\x8e\xc7\x08\xaa\x9e\x8c\x20\x52\xbc\x8f\x20\xbd\x9d\x9a\xaf\x1e\x8a\x67\xd6\x9e\xc8\x8c\x49\x0e\x99\xb1\xf0\xd9\xcc\xda\x63\xb5\xd3\x31\xaa\xcf\xb0\x33\x91\x46\x3b\x46\x9a\x28\x12\x92\x87\xcb\x95\x65\xff\x24\x7f\xaf\x91\x60\x01\xdf\xa6\x60\xae\x47\xfd\x70\x1d\xd3\x4b\x8f\xd7\x63\x1f\x74\xb0\x2a\x84\x93\xb5\x73\xab\xdf\x96\xa7\x48\x3e\x46\xb4\x8d\x9b\x1c\xca\x83\xf6\x0f\x6a\xf8\x52\xd7\x4e\xf1\xda\xae\xaf\x33\xd8\xa6\x20\xce\x9c\xb1\x28\xea\x5c\xc4\xbc\xee\xd6\xe8\xe3\x0c\xfc\x9b\x79\x8a\x5d\x03\x08\xab\x63\xbf\x71\x26\xb3\xa2\x1b\xbb\xc9\x20\x85\xf4\xc6\xfa\x78\xe8\x8f\x9a\x07\xbd\xbd\x0d\x70\x4d\xd2\xd6\x7b\xe9\xeb\xbf\x7d\x1d\xde\xd9\x98\x38\xc3\x88\xf6\x5d\x34\x3e\xda\x7c\x57\xd2\x9c\x16\x9f\x29\xc9\xd7\x6f\xbc\xc6\x65\x4e\x1d\x39\xb3\x99\xec\xd9\xf2\xbf\x60\x73\x4d\xc2\x6d\x9e\xb1\xcd\xe9\xcc\xca\x26\xdb\x9c\xa3\x7b\x8d\xdc\xe7\x39\xb9\x9f\x91\x01\x5a\xe6\xfa\x1b\x47\x65\xcc\x7b\xc2\x9c\x87\x73\xbf\x05\xec\x36\x16\x5b\x6b\x0e\xe6\xad\x37\xe9\x1d\x4b\xeb\xfd\x9c\xc9\xf3\xb6\xb4\x6c\xf5\xba\xdb\x92\xe9\x3b\x6e\x33\x77\xf3\x3f\x4f\xcf\xcc\x3e\x43\x3e\xd1\x72\x51\x38\xdf\xea\xf8\x07\x5a\x51\x94\x27\x5a\xd1\x59\xf5\xd3\x5a\x51\xd1\x0b\x5a\x59\x9f\x2e\xea\x85\x25\x77\xb7\xea\xff\x5c\x2f\x77\x76\xef\x6e\xb9\x87\x9e\xf2\x27\xec\xd7\xfc\x8c\xfd\xd6\xaf\xb0\x3f\xc2\x39\xf6\x3f\x9b\xc3\xdf\x50\x91\x82\x16\xc3\xe0\x5f\x56\x91\xf8\x38\xff\xef\x2a\x12\x73\xba\x50\x91\x58\xda\xab\xcf\x83\x75\xab\x18\xd2\x7f\x19\xfb\x49\xf9\x09\xfb\x29\xc6\x0b\xec\xa7\x54\x5f\xcd\x7e\xf5\x62\xca\xd0\x1f\xbf\x09\xa4\xf1\xac\xbf\x18\xae\xf4\x17\xe3\xb3\xfd\xe5\x43\xf6\x7f\x77\x2b\x68\x59\x49\x7b\xf8\xf9\x1b\x96\x3d\x7e\xff\xbb\xe7\xb5\xe4\x2b\xbc\x36\xbc\xf2\x86\x25\x36\x24\x91\x95\x1f\xe7\xd2\x43\x7d\xc2\xa5\x47\x5c\xe0\xd2\x53\x7c\x25\x97\x9c\x42\x0e\xa9\xa6\x5f\xd6\x6d\xf3\xfc\x26\xf0\xbf\xcc\x67\x6a\x17\x98\xcf\x22\xaf\xee\xb6\x34\x9c\x25\x0a\xfd\xb8\x92\x73\xa1\x67\x7c\x56\xbd\xc2\x67\x2b\xd7\x94\x0c\x64\x8a\x1a\x39\xe5\x94\x13\x0b\xd4\x18\x23\x04\xb4\x92\x87\x59\x83\x28\xaa\x85\x5c\x6a\x01\x21\x8c\x9a\x59\xd8\xbd\x50\x63\xb6\xd1\x65\xe4\xe6\x52\x83\x26\xd4\x92\x07\x1b\xb7\x96\x1d\x60\xff\x2f\x00\x00\xff\xff\x4e\xe7\x13\x93\x3a\x16\x00\x00")

func compiledExtensionBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionBinRuntime,
		"compiled/Extension.bin-runtime",
	)
}

func compiledExtensionBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x4b\xc3\x40\x10\x85\xff\xcb\x9c\xf7\x14\xb5\x48\x8e\xa2\x07\x0f\x82\x58\xc1\x43\x09\x32\x49\x26\xb2\x64\x33\xbb\xec\xce\xc6\x86\xd2\xff\x2e\x09\xd5\xa2\x04\x1b\x04\xd3\xdc\x72\x98\x37\xf3\xe5\xf1\xde\x6e\x76\x50\x58\x0e\x82\x2c\x90\x8a\x8f\xa4\x40\xb3\x8b\x12\x20\xdd\x64\x0a\x18\x1b\x82\x14\x18\x45\xb7\xf4\x2a\xdb\x1b\x63\x8b\xfa\x89\x2a\x50\x60\xa3\x1c\xe6\x76\x9f\x63\xa0\x40\x3a\xd7\x7f\xe5\x9d\x50\xb8\x86\x7d\xa6\xc0\x61\x87\xb9\x21\x48\x2b\x34\x81\x14\x04\x41\xa1\x87\x28\x98\x6b\xa3\xa5\x83\x14\x5a\x4d\xef\x47\x69\x15\xb9\x10\x6d\x19\xf6\xea\x17\xb6\xaf\x9b\x1c\x9b\xa3\x36\x6a\x96\x8b\x64\x38\xfb\x9d\x3c\xef\xb9\x9f\x75\x43\xa7\xc0\xfb\x0d\xab\xcb\x85\x81\xdf\xdf\x4e\xf2\xfb\xb0\x60\x39\xdc\x6b\xfd\xc6\xe4\x4f\xb1\x63\x59\x7a\x0a\xe1\x1f\xd9\x47\x82\xfc\xe8\x6d\x4b\xe5\x8b\xf5\xf5\x94\x44\x24\x57\xab\x59\xf1\xac\xa0\x59\x47\xe7\x4c\x77\x7e\xba\x3f\x35\x6d\xf8\x81\xc2\xfa\x05\xf5\xad\x44\xc1\x1f\x85\x19\xc5\xc7\x9a\x92\xbc\xb7\xf4\xec\x95\x1b\x89\xed\xdd\xd6\x69\x8f\x83\x74\x82\xb1\x73\xd3\xcd\xf5\x4e\x65\x1f\x01\x00\x00\xff\xff\x46\xf2\x90\x9d\xb6\x06\x00\x00")

func compiledExtensionnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeAbi,
		"compiled/ExtensionNative.abi",
	)
}

func compiledExtensionnativeAbi() (*asset, error) {
	bytes, err := compiledExtensionnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledExtensionnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeBinRuntime,
		"compiled/ExtensionNative.bin-runtime",
	)
}

func compiledExtensionnativeBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\x31\x0a\xc2\x40\x10\x85\xe1\xbb\xbc\x7a\x4e\xb0\x77\xf0\x04\x21\xc5\x24\x4c\x60\x20\xce\x2e\xbb\x6f\x94\x45\xbc\xbb\x58\xd9\x58\x88\xf5\x0f\xff\xb7\x3c\xb0\xd7\x18\xd4\x20\x0a\x7b\x9a\xc0\xa3\x25\x07\xca\xb2\x0a\x42\xaf\x86\x02\x8f\xb0\x0e\x41\x4d\x7e\x5a\xd3\xa9\xdb\x69\x28\x87\x9e\xc3\x04\x83\x4a\xbb\x24\x75\xf3\xd3\x39\x51\xd0\xb2\x1b\x04\x9c\xed\x3d\x39\x32\x76\x7a\x0d\x3c\xe5\x27\xb4\x26\xff\x41\x6f\x6e\xf7\x6f\xe8\xfa\x0a\x00\x00\xff\xff\x0a\x34\xa0\xdd\xeb\x00\x00\x00")

func compiledMeasureAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureAbi,
		"compiled/Measure.abi",
	)
}

func compiledMeasureAbi() (*asset, error) {
	bytes, err := compiledMeasureAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x50\xd1\x71\xc5\x20\x0c\x5b\x49\xc6\x58\x36\xe3\x40\x30\xfb\x8f\xd0\x23\xe4\xf5\xb5\xfd\xe9\x5d\x2b\x7f\x24\xc8\x3a\x90\x44\x04\x88\x0a\x2b\x04\xaa\x52\xf6\xa9\x99\x13\x80\x9a\x5f\x10\xfc\x11\x0d\xa8\xd4\xf5\x40\x18\xa0\xd6\x3e\x87\x7b\x69\x52\x89\x9a\xe6\x9b\x0b\xbf\x74\x8e\xc1\xcd\xb1\x98\xdb\xd8\x6f\x07\xd6\xb4\xa1\x35\x20\x46\xd8\xe3\xe8\xb0\x06\xde\xe3\x34\xda\x00\xde\x3a\xce\x9f\x3a\xaf\x84\xc7\x4b\xb7\xbf\x0a\xff\x74\xf5\x1b\x84\x6f\xcf\x77\x4b\x12\xf2\x35\xd3\x7f\xfa\x41\x09\x39\xad\x43\xb6\xe7\xe7\x7e\x84\x42\xe3\x66\xc2\x03\x3a\xc4\x4e\xb6\x39\xbe\x67\xb3\xbe\xe4\xb5\xcb\x34\xd7\x79\xb6\x9a\xe7\xef\x51\x9d\x21\xd0\x85\xc6\xe2\xdd\xbb\x17\x85\x45\x01\x33\x73\x4e\x40\xa4\x65\x5b\xcb\xda\x48\x5e\x0d\xb9\x04\xac\x6b\xad\xd9\xfb\x88\x71\xc1\x6c\xe4\x5c\xdd\x5a\x89\x64\x9f\x97\x69\x83\xf1\xda\x11\xda\x47\x00\x00\x00\xff\xff\x37\x3e\x41\xaa\x40\x02\x00\x00")

func compiledMeasureBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureBinRuntime,
		"compiled/Measure.bin-runtime",
	)
}

func compiledMeasureBinRuntime() (*asset, error) {
	bytes, err := compiledMeasureBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeterAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcb\xaa\x14\x31\x10\xfd\x97\x5a\x67\x25\x28\xd2\x3b\x5d\xb8\x13\x17\xba\xbb\x0c\x52\xdd\x5d\x2d\x81\xa4\x2a\x24\x95\x19\x9b\xcb\xfd\x77\x99\xb9\xfd\x42\xfb\xe5\x38\x32\xb3\xea\x86\x7a\x9e\x53\x75\x92\x3c\x3d\x43\x25\x9c\x14\x59\xa1\xd0\x98\xc9\x80\xe5\x90\x35\x41\xf1\x74\x30\xc0\xe8\x09\x8a\xd7\x8f\x01\xc9\xda\x99\x9e\x7b\x0b\x18\xd0\x36\x9c\xff\x92\x46\xcb\x3f\xe0\xe5\x60\x20\x60\x8b\xa5\x23\x28\x1a\x74\x89\x0c\x24\x45\xa5\xcf\x59\xb1\xb4\xce\x6a\x0b\x05\x84\x1c\x69\x0c\x6d\x32\x57\x6a\x85\xe1\xc5\x4c\xdb\xe9\xa2\x87\x7e\x86\xa2\xdf\x53\x20\xae\x29\x8e\x19\xb0\xae\x23\xa5\x74\x49\xd0\x3b\x1d\xd1\xe5\x49\x91\x6c\x59\xdf\xbc\x7d\x77\x69\xb0\x73\xc1\x10\xa2\x1c\x17\x90\xa5\x5c\x55\xe7\x94\x43\x82\x52\xc4\xed\x84\xc7\xc2\xbd\xd3\x16\xc8\x45\xce\x55\x14\xdd\xd7\x1c\x82\x6b\xb7\xa8\x9f\x42\xdb\x6e\xee\x68\xe9\xf4\x0f\xdc\x37\x51\xfc\x3a\xf1\x2a\xeb\x76\xf4\x92\x59\x57\x27\xa3\x11\x39\x35\x14\x3f\xbd\x16\x7b\xc0\xf1\xd4\x54\x59\x8f\x2e\xed\x99\xcd\xfb\x5b\xaa\xe2\xb7\x8e\x46\x5a\xe5\xc4\xb3\x92\x18\x7b\x2e\xd1\x21\x57\xf4\xa5\x99\x6f\xba\x33\xff\xd7\xbd\x5a\xe4\x33\xb5\xbe\x14\xf7\x48\x87\xcc\x0d\xd7\xf8\xae\x2b\x7c\x67\x29\xfb\xc7\x3e\x61\x3f\xe6\xc8\x54\xdf\xe1\x84\xfd\x6b\x1d\x9b\x3d\xf7\xdf\xe4\x72\x73\x4e\x4e\x9d\x9e\x67\xb0\x45\xf2\x68\xf9\x2c\xa6\xdb\x83\x44\x16\x6e\xbd\xe4\x34\xb7\x7c\x96\x6b\xfa\x49\x75\x4f\xc0\xf6\x2e\x2e\x04\x2c\xad\xe6\xe0\xde\x95\xde\xff\x1c\xf8\x36\xaa\xb5\x73\xa2\x23\xb1\x5e\x0d\x69\x65\x90\x0b\x11\xab\xef\x9a\xeb\x81\x7d\xb8\xbc\x73\xd0\xfd\x01\xec\xf0\x2b\x00\x00\xff\xff\x66\xc7\x72\x63\xff\x09\x00\x00")

func compiledMeterAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeterAbi,
		"compiled/Meter.abi",
	)
}

func compiledMeterAbi() (*asset, error) {
	bytes, err := compiledMeterAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Meter.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeterBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x0b\x76\xea\x38\x0c\xdd\x92\x3e\xd6\xc7\xcb\xf1\x77\xff\x4b\x98\xa3\x38\x50\x28\x7d\x94\xd0\xd2\xce\xcc\x4b\x0e\x94\x0a\x47\x96\xaf\xaf\xae\x64\x14\x1c\x14\x12\x08\x29\x40\x62\x45\x50\x04\x28\x53\x4c\x01\x80\xc5\x1a\x20\x3c\x79\x65\x80\xa4\x3c\xf7\x0b\xd5\x41\x19\x74\xf6\x3e\x80\x31\xc5\x3c\x35\x89\x6d\xd6\x2c\xa3\x58\x5d\x56\x4c\xbb\x15\x1d\x15\x7a\xef\xcb\x5a\xf2\xb2\x12\x57\x37\x3a\x59\xfb\x3e\x96\x91\xdb\x10\xb5\xcd\x4a\xb2\x8f\x35\x28\xe0\xc4\xb8\xac\x5e\x96\x35\x4b\xf7\x5c\xd3\x6e\x1d\xb8\xac\x25\x83\xe4\x56\xeb\x66\x65\xdb\xad\xb5\xb2\x98\xf3\x6e\xed\xba\xac\xdd\x33\xb2\xb4\x15\x43\x92\xba\x5b\xbb\xd2\xe8\x3c\x96\xd5\x55\x4c\x6a\xa0\xe8\x30\xbb\x54\x4e\x0e\x28\xb1\xea\x06\x0b\xdd\x65\x97\x0d\xf1\x96\xe3\x99\xd9\x45\xe3\x99\x04\x82\xbe\xed\x0c\x01\xa0\x93\x23\xb0\x93\x90\xb3\xa3\xa3\xc4\x8b\xd6\x77\x19\x05\x1c\x04\xf3\x3e\x36\x83\x83\xb3\x73\xf8\x97\x1a\xe3\x71\xcd\x8a\xb0\x61\xe2\x04\xdb\xf3\x9e\x60\xf7\xe1\x18\x4f\xad\x28\xc6\x88\xf9\x05\xd6\x9d\xb7\xd7\xfa\x5e\x01\xb7\x1d\x5c\xbe\x58\x77\x5f\x1c\x73\x6b\xc4\xc8\xdb\xfc\xbc\xcd\x04\x50\x80\x31\xa3\x5e\xc7\x19\x9e\x33\x2d\xdf\xa7\x35\x66\x04\xce\x30\xf9\x02\x9f\x18\xf9\x1e\x1f\xf4\x19\xfc\x74\x60\x05\x5e\x11\x05\x3e\x2c\x76\xe6\xd7\x67\x17\xea\x1b\x46\x99\xf2\xe6\x81\xe5\xbd\x6d\x8f\x0e\x41\xb8\x5c\xed\x05\xa1\xac\xfb\xdd\x9a\xee\xae\xa4\xca\xed\x4a\xea\x88\x24\xa3\x7a\xed\xfd\x88\xd7\x71\x8b\x0f\xf1\x8b\xf0\x79\x19\xbe\xda\xf1\xcb\xf8\x92\xde\xe2\x4b\x1a\xf8\xba\xca\xb5\x77\x85\x88\x70\xbd\x1f\x99\x21\xeb\xed\x0c\xad\x7e\x3f\xd6\x67\x5c\x5c\xc7\xd3\xcc\xa0\xd1\x6f\xa3\x9d\xaa\x08\x39\xbd\x4e\x59\xf8\xac\x06\x7f\x56\x16\xc6\xfa\x90\xb2\xb0\xf2\x0b\x95\x85\xed\x16\x1f\xae\xed\x87\x95\x25\xfb\xd7\x95\x85\x07\xdd\xac\x24\x25\xfc\x8f\x69\x40\x2e\x5f\xd7\x80\xa4\x76\x8b\x84\xc5\x7b\x55\x7b\x3a\x93\x52\xfe\x00\xdf\x61\xff\x3e\x7c\xcf\x58\x36\xe8\x47\x57\xab\xa0\x9b\x75\x65\x79\xac\x68\x75\x82\xa1\x0e\x70\xb1\x07\x36\x53\x34\x3e\x49\xc5\xe8\xb9\x4e\x30\x7c\x9d\xb2\x7e\x45\x19\xb6\x85\x2f\xf3\x91\xf5\x1f\x19\x7b\x81\x00\xbc\x7d\x8e\x59\x09\xb6\xb9\x0f\x21\xff\x5d\x33\x7b\xec\x9a\x08\x38\x1d\xf1\x78\x10\xa5\xe9\x4d\xea\xc0\x21\xa3\x8e\x66\x5d\x6a\xc7\x34\x0d\x13\x59\xc7\xe1\x69\x72\xef\xd1\x83\x37\x98\x56\x89\x32\x0e\xa9\x04\x50\x9a\x37\x6b\x5c\x33\x89\xa7\x47\x99\x54\xa2\x22\x6c\x4c\x0c\x46\x6e\x7c\xdc\x77\x98\xe1\x48\xcc\xca\x60\x3a\x58\xb1\xef\xfe\xf1\xf2\xec\xf0\x95\x73\x08\xec\x2b\x80\x14\x7b\x40\xe7\xf8\x9d\x23\x8f\x37\x26\x98\x03\x57\x94\x3d\xfb\x35\xe3\x75\xf6\x4b\x99\xf8\xf6\x6d\x11\x31\xee\x3b\x7b\xc7\xfa\xb4\x8f\xbb\xa8\x40\x61\x8f\xdd\xde\xab\xa4\xd6\x7a\xe9\xf3\x4d\x3f\x2e\x2b\xec\x65\x4e\x7f\x9c\x2d\x7e\x88\x87\xdf\x99\x2d\xbf\x93\xa7\x92\x02\xbf\xb8\x15\xc1\xda\xd6\x8d\x05\xba\x36\xc1\x1b\x5b\x2e\x4f\x93\xe2\x8d\x13\x1f\xf5\x43\xd1\x95\xbc\xc5\xe2\x60\x53\xc9\x44\xb3\x36\x4b\x9a\x75\x70\x21\x88\xbf\xc6\x26\x1a\x57\x56\xd6\xac\xa2\xc3\x12\x81\xa2\x36\x6d\x3a\xcd\x14\x75\x28\xab\x9c\x34\xf0\x8e\x22\x6f\xac\xf8\x3b\x77\x79\x5b\x35\x39\x49\x02\x5e\x7d\xdc\x49\x25\xa3\x23\x96\xe2\x29\xee\xa8\x72\x99\xf7\x8c\x58\x8a\xc3\xa7\xae\xef\x94\x27\x0a\x48\xd7\x99\x73\x58\x85\x04\xb1\x67\xd8\x3a\xdd\x6d\x7f\xe8\x15\x3a\xe4\x07\xf5\xff\x49\xa4\x77\x9e\x3d\xa0\x79\x19\xea\x1d\xcd\xcb\x38\x9f\xd0\xbc\xcc\xf2\x84\xe6\xad\xff\xf4\x93\xfe\x84\xaf\xfb\x13\x49\xf2\x64\x6f\x02\x7f\xe8\x4f\x22\xfe\x6c\xcc\x7f\x60\xde\xfb\x5a\x77\x28\x6f\x3c\x1d\x19\x8d\xc9\x23\x9a\xd2\xbb\x98\x1c\x9c\xe9\x38\xfb\x73\x16\x18\xd9\xf5\xaf\x62\x7f\xf1\x72\x87\xfd\x25\x8f\x27\xd8\x5f\x6a\x3a\xc6\xfe\x63\x9c\x90\xba\x57\xc5\x2a\xf8\x73\x55\x91\xe0\xb3\xaa\x68\xac\xa2\x4d\x95\x40\xa7\x11\x81\x76\x45\xe3\x75\x7a\x20\x30\x52\x31\x8c\x67\xe2\x93\xa6\x47\xaa\xe2\xb6\xc6\xf6\x78\x0d\x38\xca\xf9\xd6\x9a\xf5\x99\x7f\xbf\xef\xac\xad\xdf\x61\x61\x1d\xf8\x04\x0b\xeb\xb4\x2f\xf5\x9d\xab\x36\x1f\xd2\xab\x6f\xed\x0a\x7e\xa9\xeb\xfc\x48\xe3\x1d\x11\x37\x4c\x47\x29\x62\x47\x59\x36\x31\x69\x92\x29\x9e\xce\x9d\x05\xbf\x48\x5b\x7f\x00\xb3\xab\x53\xe1\xf9\x97\xb7\x07\x38\xde\x79\xde\xe1\x78\x17\x7e\x82\xe3\x5d\xf3\x31\x8e\xef\xca\xd9\xc7\xf8\xc1\xf3\x44\xff\xc2\x79\x82\xb6\x13\xc5\xf9\x2c\x01\xf0\xd8\x79\xe2\x28\x47\x2d\x41\x45\x91\xe9\xfc\xff\xe5\x28\x7c\xce\xd1\x71\xf7\xfc\x3f\x3e\x3b\xff\x07\x03\x0f\x45\x7c\xf0\xb7\x9d\xde\x27\x09\x95\x8e\x75\x50\xf3\x5c\x35\x37\xaa\xa0\x3e\x1b\x9b\xf7\x52\xb2\x50\x2d\x16\xcd\x5f\x4b\x05\x51\xc9\xa7\x48\x49\x7d\x0a\x71\xe5\x31\xcf\x7b\xfb\xc0\x6f\x3b\xa7\xca\x0a\x50\x50\x45\xc9\x8a\x15\x23\x06\x71\x82\x69\x69\x62\x4f\x8d\xca\x6c\x32\x42\xd6\x9c\x8c\x70\xa6\x46\xd4\x0b\xd0\x28\x82\xde\xd1\x6d\xd4\x5c\x86\x55\x54\x90\x36\x46\xd3\x31\xbd\x7a\x43\x00\xca\xff\x04\x00\x00\xff\xff\x08\x2d\xf4\x01\x80\x1e\x00\x00")

func compiledMeterBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeterBinRuntime,
		"compiled/Meter.bin-runtime",
	)
}

func compiledMeterBinRuntime() (*asset, error) {
	bytes, err := compiledMeterBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Meter.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMetergovAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcb\xaa\x14\x31\x10\xfd\x97\x5a\x67\x25\x28\xd2\x3b\x5d\xb8\x13\x17\xba\xbb\x0c\x52\xdd\x5d\x2d\x81\xa4\x2a\x24\x95\x19\x9b\xcb\xfd\x77\x99\xb9\xfd\x42\xfb\xe5\x38\x32\xb3\xea\x86\x7a\x9e\x53\x75\x92\x3c\x3d\x43\x25\x9c\x14\x59\xa1\xd0\x98\xc9\x80\xe5\x90\x35\x41\xf1\x74\x30\xc0\xe8\x09\x8a\xd7\x8f\x01\xc9\xda\x99\x9e\x7b\x0b\x18\xd0\x36\x9c\xff\x92\x46\xcb\x3f\xe0\xe5\x60\x20\x60\x8b\xa5\x23\x28\x1a\x74\x89\x0c\x24\x45\xa5\xcf\x59\xb1\xb4\xce\x6a\x0b\x05\x84\x1c\x69\x0c\x6d\x32\x57\x6a\x85\xe1\xc5\x4c\xdb\xe9\xa2\x87\x7e\x86\xa2\xdf\x53\x20\xae\x29\x8e\x19\xb0\xae\x23\xa5\x74\x49\xd0\x3b\x1d\xd1\xe5\x49\x91\x6c\x59\xdf\xbc\x7d\x77\x69\xb0\x73\xc1\x10\xa2\x1c\x17\x90\xa5\x5c\x55\xe7\x94\x43\x82\x52\xc4\xed\x84\xc7\xc2\xbd\xd3\x16\xc8\x45\xce\x55\x14\xdd\xd7\x1c\x82\x6b\xb7\xa8\x9f\x42\xdb\x6e\xee\x68\xe9\xf4\x0f\xdc\x37\x51\xfc\x3a\xf1\x2a\xeb\x76\xf4\x92\x59\x57\x27\xa3\x11\x39\x35\x14\x3f\xbd\x16\x7b\xc0\xf1\xd4\x54\x59\x8f\x2e\xed\x99\xcd\xfb\x5b\xaa\xe2\xb7\x8e\x46\x5a\xe5\xc4\xb3\x92\x18\x7b\x2e\xd1\x21\x57\xf4\xa5\x99\x6f\xba\x33\xff\xd7\xbd\x5a\xe4\x33\xb5\xbe\x14\xf7\x48\x87\xcc\x0d\xd7\xf8\xae\x2b\x7c\x67\x29\xfb\xc7\x3e\x61\x3f\xe6\xc8\x54\xdf\xe1\x84\xfd\x6b\x1d\x9b\x3d\xf7\xdf\xe4\x72\x73\x4e\x4e\x9d\x9e\x67\xb0\x45\xf2\x68\xf9\x2c\xa6\xdb\x83\x44\x16\x6e\xbd\xe4\x34\xb7\x7c\x96\x6b\xfa\x49\x75\x4f\xc0\xf6\x2e\x2e\x04\x2c\xad\xe6\xe0\xde\x95\xde\xff\x1c\xf8\x36\xaa\xb5\x73\xa2\x23\xb1\x5e\x0d\x69\x65\x90\x0b\x11\xab\xef\x9a\xeb\x81\x7d\xb8\xbc\x73\xd0\xfd\x01\xec\xf0\x2b\x00\x00\xff\xff\x66\xc7\x72\x63\xff\x09\x00\x00")

func compiledMetergovAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMetergovAbi,
		"compiled/MeterGov.abi",
	)
}

func compiledMetergovAbi() (*asset, error) {
	bytes, err := compiledMetergovAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterGov.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMetergovBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x09\x76\xdb\x30\x0e\xbd\x12\x16\x62\xe1\x71\xb8\xde\xff\x08\xf3\x20\xca\x5b\x9c\x3a\x96\x9d\xa4\x33\x53\xe9\xc5\x75\x61\x0a\x04\x3f\x3f\x3e\x40\x29\x38\x28\x24\x10\x52\x80\xc4\x8a\xa0\x08\x50\xa6\x98\x02\x00\x8b\x35\x40\x78\xf1\xca\x00\x49\x79\xee\x17\xaa\x83\x32\xe8\xec\x7d\x00\x63\x8a\x79\x6a\x12\xdb\xac\x59\x46\xb1\xba\xac\x98\x76\x2b\x3a\x2a\xf4\xde\x97\xb5\xe4\x65\x25\xae\x6e\x74\xb2\xf6\x7d\x2c\x23\xb7\x21\x6a\x9b\x95\x64\x1f\x6b\x50\xc0\x89\x71\x59\xbd\x2c\x6b\x96\xee\xb9\xa6\xdd\x3a\x70\x59\x4b\x06\xc9\xad\xd6\xcd\xca\xb6\x5b\x6b\x65\x31\xe7\xdd\xda\x75\x59\xbb\x67\x64\x69\x2b\x86\x24\x75\xb7\x76\xa5\xd1\x79\x2c\xab\xab\x98\xd4\x40\xd1\x61\x76\xa9\x9c\x1c\x50\x62\xd5\x0d\x16\xba\xcb\x2e\x1b\xe2\x2d\xc7\x33\xb3\x8b\xc6\x33\x09\x04\x7d\xdb\x19\x02\x40\x27\x47\x60\x27\x21\x67\x47\x47\x89\x3f\x5a\xbf\x65\x14\x70\x10\xcc\xfb\xd8\x0c\x0e\xce\xce\xe1\x5f\x6a\x8c\xc7\x35\x2b\xc2\x86\x89\x13\x6c\xcf\x7b\x82\xdd\x87\x63\x3c\xb5\xa2\x18\x23\xe6\x17\x58\x77\xde\xfe\xd6\xef\x0a\xb8\xed\xe0\xf2\xc5\xba\xfb\xe2\x98\x5b\x23\x46\xde\xe6\xe7\x6d\x26\x80\x02\x8c\x19\xf5\x36\xce\xf0\x9c\x69\xf9\x3e\xad\x31\x23\x70\x86\xc9\x57\xf8\xc4\xc8\x8f\xf8\xa0\xcf\xe0\xa7\x03\x2b\xf0\x8a\x28\xf0\x61\xb1\x33\xbf\xbe\xba\x50\x2f\x18\x65\xca\x9b\x07\x96\x8f\xb6\x3d\x3a\x04\xe1\x72\xb3\x17\x84\xb2\xee\x0f\x6b\x7a\xb8\x92\x2a\xf7\x2b\xa9\x23\x92\x8c\xea\xad\xf7\x23\x5e\xc7\x3d\x3e\xc4\x3f\x84\xcf\x8f\xe1\xab\x1d\xdf\xc6\x97\xf4\x1e\x5f\xd2\xc0\xd7\x55\x6e\xbd\x2b\x44\x84\xeb\xf3\xc8\x0c\x59\xef\x67\x68\xf5\xfb\xb1\x3e\xe3\xe2\x3a\x5e\x66\x06\x8d\x7e\x1f\xed\x54\x45\xc8\xe9\xe7\x94\x85\xcf\x6a\xf0\x67\x65\x61\xac\x4f\x29\x0b\x2b\xff\xa0\xb2\xb0\xdd\xe3\xc3\xb5\xfd\xb2\xb2\x64\x7f\x5f\x59\x78\xd0\xdd\x4a\x52\xc2\xff\x31\x0d\xc8\xe5\x7d\x0d\x48\x6a\xf7\x48\x58\x7c\x56\xb5\x97\x33\x29\xe5\x4f\xf0\x1d\xf6\xdf\x87\xef\x19\xcb\x06\xfd\xe8\x6a\x15\x74\xb3\xae\x2c\x8f\x15\xad\x4e\x30\xd4\x01\xfc\xf2\xbc\xcd\x14\x8d\x4f\x52\x31\x4a\xa6\x73\x03\xe6\xd0\x15\xbe\x4e\x59\xbf\xa2\x0c\xdb\xc2\x97\xf9\xc8\xfa\x8f\x8c\xbd\x42\x00\x2e\xdf\x63\x56\x82\x6d\xee\x43\xc8\x7f\xd7\xcc\x1e\xbb\x26\x02\x4e\x47\x3c\x1e\x44\x69\x7a\x93\x3a\x70\xc8\xa8\xa3\x59\x97\xda\x31\x4d\xc3\x44\xd6\x71\x78\x9a\xdc\x7b\xf4\xe0\x0d\xa6\x55\xa2\x8c\x43\x2a\x01\x94\xe6\xcd\x1a\xd7\x4c\xe2\xe9\x59\x26\x95\xa8\x08\x1b\x13\x83\x91\x1b\x1f\xf7\x1d\x66\x38\x12\xb3\x72\x21\xd6\x01\x70\xf2\x8f\xd7\x67\x87\x77\xce\x21\xb0\xaf\x00\x52\xec\x01\x9d\xe3\x77\x8e\x3c\xde\x98\x60\x0e\x5c\x51\xf6\xec\xd7\x8c\xb7\xd9\x2f\x65\xe2\xe5\xd7\x22\x62\xdc\x77\xf6\x8e\xf5\x6d\x1f\x77\x55\x81\xc2\x1e\xbb\xbd\x57\x49\xad\xf5\xda\xe7\x45\x3f\xae\x2b\xec\x75\x4e\x7f\x9e\x2d\x7e\x88\x87\xdf\x99\x2d\x7f\x27\x4f\x25\x05\x7e\x71\x2b\x82\xb5\xad\x1b\x0b\x74\x6d\x82\x37\xb6\x5c\x5e\x26\xc5\x85\x13\x9f\xf5\x43\xd1\x95\x5c\x62\x71\xb0\xa9\x64\xa2\x59\x9b\x25\xcd\x3a\xb8\x10\xc4\xbf\xc6\x26\x1a\x57\x56\xd6\xac\xa2\xc3\x12\x81\xa2\x36\x6d\x3a\xcd\x14\x75\x28\xab\x9c\x34\xf0\x81\x22\x6f\xac\xf8\x37\x77\x79\x5b\x35\x39\x49\x02\x5e\x7d\xdc\x49\x25\xa3\x23\x96\xe2\x29\xee\xa8\x72\x99\xf7\x8c\x58\x8a\xc3\xa7\xae\xef\x94\x27\x0a\x48\xb7\x99\x73\x58\x85\x18\xca\x24\x83\xe8\x3b\xb7\xfd\xa1\x9f\xd0\x21\x3f\xa8\xff\x2f\x22\xbd\xf3\xec\x09\xcd\xcb\x50\x1f\x68\x5e\xc6\xf9\x82\xe6\x65\x96\x17\x34\x6f\xfd\x4f\xbf\xe8\x4f\xd2\x6d\x7f\x22\x49\x28\xd9\x3b\x5a\xf0\x51\x71\x23\xfe\x6c\xcc\x7f\x60\xde\xc7\x5a\x77\x28\x6f\x3c\x1d\x19\x8d\xc9\x23\x9a\xd2\xbb\x98\x1c\x9c\xe9\x28\xfb\x41\x72\x16\x18\xd9\xf5\x9f\x62\x7f\xf1\xf2\x80\xfd\x25\x8f\x17\xd8\x5f\x6a\x3a\xc6\xfe\x63\x9c\x90\xba\x57\xc5\x2a\xf8\x7b\x55\x91\xe0\xab\xaa\x68\xac\xa2\x4d\x95\x40\xa7\x11\x81\x76\x45\xe3\x75\x7a\x20\x30\x52\x31\x8c\x67\xe2\x9b\xa6\x67\xaa\xe2\xb6\xc6\xf6\x7c\x0d\x38\xca\xf9\x51\x4a\xe6\xa9\xf5\xaf\xf7\x9d\xb5\xf5\x07\x2c\xac\x03\x5f\x60\x61\x9d\xf6\x56\xdf\xb9\x6a\xf3\x21\xbd\xfa\xd6\xae\xe0\x2f\x75\x9d\x9f\x69\xbc\x23\xe2\x86\xe9\x28\x45\xec\x28\xcb\xa8\xd6\x91\xd4\x86\xa7\x73\x67\xc1\x3f\xa4\xad\xbf\x80\xd9\xcd\xa9\xf0\xfc\xe6\xed\x09\x8e\x77\x9e\x0f\x38\xde\x85\x5f\xe0\x78\xd7\x7c\x8c\xe3\xbb\x72\xf6\x31\x7e\xf1\x3c\xd1\xdf\x38\x4f\xd0\x76\xa2\x38\x9f\x25\x00\x9e\x3b\x4f\x1c\xe5\x68\x9f\x66\x45\x7b\x5a\xef\x79\xff\x3f\x39\x0a\x5f\x73\x74\x3c\x3c\xff\x8f\xaf\xce\xff\xc1\xc0\x43\x11\x1f\x7c\xb7\xd3\xfb\x24\xa1\xd2\xb1\x0e\x6a\x9e\xab\xe6\x46\x15\xd4\x67\x63\xf3\x5e\x4a\x16\xaa\xc5\xa2\xf9\x6b\xa9\x20\x2a\xf9\x14\x29\xa9\x4f\x21\xae\x3c\xe6\x79\x6f\x9f\x78\xb7\x73\xaa\xac\x00\x05\x55\x94\xac\x58\x31\x62\x10\x27\xd0\x24\xa3\x77\x4e\xe8\x2c\x58\x5d\x61\xd0\xac\xb5\x43\x1c\xd9\x33\xb9\xf1\x84\xa2\x95\xd3\x50\xa5\xee\x80\x09\xac\x3b\x56\x9c\xa3\xb7\x32\x61\x00\x50\xfe\x4f\x00\x00\x00\xff\xff\xbe\x33\x97\x05\x80\x1e\x00\x00")

func compiledMetergovBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMetergovBinRuntime,
		"compiled/MeterGov.bin-runtime",
	)
}

func compiledMetergovBinRuntime() (*asset, error) {
	bytes, err := compiledMetergovBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterGov.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeternativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x94\x3f\x6b\xc3\x30\x10\xc5\xbf\xcb\xcd\x9a\x0a\xed\xe0\xb1\x7b\xa7\x8e\x21\x98\x73\x7c\x31\x02\xf9\x24\xa4\x77\x29\x26\xe4\xbb\x17\x4a\x8d\xfb\x27\x25\x1e\xdc\xc4\x64\x14\xdc\x1d\xef\xf7\x78\x7a\x9b\x23\xed\xa2\x16\xb0\x82\x2a\x64\x13\x47\x5e\x93\xa1\x50\xb5\x39\x92\x72\x2f\x54\x11\xb7\x6d\x26\x47\x18\xd2\xf8\x92\x52\xe8\xb4\x75\xe3\x80\x32\xfc\x41\xea\x1e\xb9\xee\x04\xe4\x28\x1a\x7e\x1e\x99\x0e\x98\x57\x3c\x3c\x3e\x7d\x1c\x48\x3c\x70\x13\x84\xaa\x3d\x87\x22\x8e\x0a\x18\xf2\x62\xe0\xc6\x07\x8f\x81\x2a\x3a\x78\x79\x9b\x76\xf7\xa6\x3b\xf8\xa8\x74\x72\x8b\x2a\xe7\x02\xc9\x97\x84\x7f\xdd\xff\x1f\xe1\x67\x2d\x45\x04\x87\x57\x4b\x29\x0c\x37\xb0\xf6\x73\x7b\xb6\xb7\x6e\x1a\xe8\xa3\x29\xce\x8b\xfb\x45\xd9\xd5\xc5\x9a\x4b\x78\x4d\x8c\x61\x26\x9b\x46\x1d\x87\x56\x42\x58\x73\xdb\x7e\x03\x5c\x9a\x63\x46\x96\xba\x1b\x87\x69\x81\x86\xe9\xd6\x51\x31\x7f\xff\xd4\x67\xcb\x2a\xed\x3d\xff\xd4\xf5\x04\xf9\xde\xbd\xbe\x6a\x29\x6e\xdf\x03\x00\x00\xff\xff\xeb\xb1\xae\x26\x0d\x08\x00\x00")

func compiledMeternativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeternativeAbi,
		"compiled/MeterNative.abi",
	)
}

func compiledMeternativeAbi() (*asset, error) {
	bytes, err := compiledMeternativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeternativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledMeternativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeternativeBinRuntime,
		"compiled/MeterNative.bin-runtime",
	)
}

func compiledMeternativeBinRuntime() (*asset, error) {
	bytes, err := compiledMeternativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x59\x76\xe4\x30\x08\xbc\x52\x01\x62\x3b\x8e\x2c\x4b\xf7\x3f\xc2\x3c\x59\xee\x25\x99\x4c\x27\xee\x79\x91\x3f\xac\x06\x9a\xa5\x0a\xb0\x21\x60\x28\x50\x36\xa0\x88\x11\x8c\x00\x75\x75\x03\x20\xea\x0d\x84\x37\x4f\x02\xc5\x64\x9c\x87\x2c\x60\xc2\x2e\xa3\x64\x01\x95\x23\x4e\x53\x9f\xd2\xe8\xb5\x5a\x6d\xa7\x34\x7d\x49\x9b\x94\x86\xe8\xba\xa4\x7b\x53\xd7\x6d\x66\x15\x18\xbb\x6e\x52\x02\xa4\x53\x63\xb1\xb2\x5d\x72\x3d\x2a\x48\x9d\xf5\x04\xc4\x20\x41\xa0\x44\x20\x20\x53\x0a\x4a\xb2\x84\x81\xe7\x15\xc9\x79\x68\x45\x3f\xcb\xf4\x78\x8c\x40\x22\x6a\xba\x01\xcf\x51\xab\xfc\x1d\xb5\xd9\xb5\xa8\xf7\x08\xbc\x95\x19\xe1\x60\x82\x02\xc1\x41\x93\x91\xc3\x96\x0e\x9b\x53\x93\x04\x49\x0c\x79\xce\xa4\x7f\x51\xff\x20\x23\x88\x8d\x8f\x5e\xfd\xce\xc6\x77\x87\xec\x8a\xed\xf7\xd9\x1e\x28\x6e\x8f\x9c\xae\x78\x17\xb9\x62\x4d\x85\xf4\xc0\x85\xf6\x7d\xe2\x32\x33\xf1\x81\x68\xe2\x59\xdf\x6d\x65\xac\x0a\x51\x30\x71\x3c\x59\x9c\x2c\x41\x82\xa7\x86\xea\x03\x83\x80\x0f\x63\x57\x4b\x6b\x5e\x2c\xad\x4b\x65\x98\x7a\x98\x9a\xb8\x7a\xb1\xe1\xcc\x70\x36\x75\x9a\x76\xf3\x66\xe5\x73\x3c\xc5\x0b\x4c\xe7\x04\xe0\x0a\x2e\x26\x5c\xd2\x6a\x4a\x0d\x09\x39\xbd\xc9\xf3\x7c\xfe\xcf\xac\x83\x3f\x20\x24\xb7\x8e\xbf\xbd\x9f\xd0\x79\xee\x6d\x3e\x27\x00\xb8\xd7\x17\x32\x67\xe7\xe8\x67\x0f\xc8\x46\x7a\xf6\x39\xcf\x6d\xf1\xdc\xe7\x5a\x07\x3d\xb4\x0e\x75\xd9\x97\x5e\xfa\xba\x9d\x76\xc7\xb3\x7c\xce\x5c\x7c\x70\x74\xe1\x62\x23\xa0\xa4\x43\x1b\xf5\x3d\xc3\x37\x12\xe9\x83\x07\xa5\x14\xc9\x8d\xb5\xb6\xad\x5a\xd5\x6e\x39\x98\xb2\x47\xda\x68\xb9\x93\x67\xf0\x4f\x27\xb5\xae\x0a\x6d\x6d\xae\xab\x8c\x6d\x3b\x29\x7a\xaf\x77\xbe\xf8\x97\xf8\xe2\x7f\xf3\x75\xab\x8a\xbf\x67\x48\x78\x7f\xc1\x90\x14\x7a\xcd\xd0\xf2\x3f\xe5\x8c\x20\x3a\xff\x75\xfb\x16\x2d\x9f\x8f\xad\xaa\xf4\xf5\x36\x9d\xef\xf3\xd7\x9b\xa8\x27\x57\xb2\xb1\xd7\xb3\x5e\xfa\x0d\xcc\x7f\x86\xe7\xae\xaf\xf0\xec\xf9\x0e\x9e\x63\xbc\x81\x27\xe6\x27\xac\x92\xa9\xb1\x57\xaf\xce\x02\x0d\x86\x6b\x6a\x65\xe6\x2c\x2c\xda\x87\xf4\xb2\x49\x19\xd5\x51\x74\xf3\xcc\x0c\xb3\x2e\x42\x4e\x4a\x39\x28\x99\x4b\xdb\x93\xb4\x16\xf3\x60\xca\x04\x38\xff\x04\x00\x00\xff\xff\x37\xe2\xc8\xd6\x82\x08\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x4e\xc3\x30\x10\x45\xef\x32\x6b\xaf\x8a\x60\x91\x3b\x70\x82\x2a\x42\x93\x74\x8a\x2c\xcc\x38\xca\xfc\x09\x58\x55\xef\x8e\x5a\x51\x27\x10\xa4\x88\x2e\x2d\x7f\xfb\xbf\xf7\xf7\x27\xea\xb3\x1a\x58\x41\xcd\x91\x93\x49\xa0\xa8\x83\xc3\xa8\xd9\x9f\x48\xf9\x5d\xa8\xa1\x37\x29\x14\x08\x65\xb8\x1c\xba\x02\xb1\x87\x1d\x9d\x43\xbd\x9f\x38\xb9\xcc\x09\x8f\x8a\xdd\xe3\x13\x9d\xdb\x70\x4b\x28\x23\x4e\xf2\x62\x02\x0a\x94\x1d\xdf\x0d\x6d\xa0\x81\x0b\x77\x49\x6a\xbb\x81\x21\xcf\x0e\xee\x62\x8a\x28\x97\xb7\x59\x6f\xa1\x5a\x71\x74\xed\x11\xb3\x5e\x29\x66\x03\x8c\xbe\x14\x58\xf5\xcb\xa7\xf4\x8e\x3c\xfe\x80\xa8\x1a\xf3\xf7\x7c\x38\x8c\x62\x76\x35\xd8\x06\x9c\xa2\x7c\xfc\x17\x6d\x63\xdb\x15\xf9\xeb\xaf\xe5\xfe\x80\x5e\xce\x7e\x3f\x74\xfb\x15\x00\x00\xff\xff\x4b\xb6\x04\x06\x13\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x8f\xda\x30\x10\xfd\x2f\x3e\xe7\x44\xd5\x1e\x72\x45\xea\x8d\xaa\x6a\xd5\x13\x42\xd5\xc4\x19\xa8\x85\x33\x8e\x3c\x63\x50\x84\xfa\xdf\x57\xa0\x25\x31\x4b\x84\x77\xf9\xd8\x84\x23\xe2\x4d\x3c\xcf\xf3\xde\xf3\xcc\x77\x4a\x3b\x62\x01\x12\x95\x2f\xc1\x32\x66\xca\x50\x1d\x84\x55\x3e\xdf\x29\x82\x0a\x55\xae\xfe\x32\xda\xa5\xca\x94\x34\xf5\xfe\x27\x94\xa5\x47\x66\xf5\x3f\xeb\x10\x84\xdb\x19\xb0\xa0\xef\x81\x2d\xb2\x23\x8c\x51\x5a\x94\x0b\xf2\x7a\xce\x22\x53\x35\x34\x50\x58\x6c\x7b\x60\x01\xc1\x59\x10\x28\x8c\x35\xd2\xa8\x5c\x91\xa3\x23\xa8\x3d\x61\x19\x48\x8b\x71\x74\xe8\xa4\xe3\x21\x3e\x5c\x4b\x23\x70\x82\x81\xe1\x3f\xfc\xa6\xfd\xb6\xba\x2b\x2c\x9c\xb3\x87\xaa\x34\xaf\x8d\xc1\xed\x23\x19\xad\xb1\x89\xfa\x6a\x04\xf9\xcb\xe4\x64\x24\xe2\x3c\xac\xf0\xbb\x4b\x93\x8a\x8a\x87\xe7\x55\x58\xa7\xd7\x3f\x42\x55\xc4\x03\x0b\x86\x64\xf2\xf5\x5b\xcc\x0f\x09\xfd\xaa\x49\x71\x8b\x0b\xef\xc4\xed\x16\x37\x25\x65\xe8\xb1\x72\x1b\x3c\x93\xe2\xd0\x4e\xea\x1a\xd4\xc1\x7b\x24\xf9\x5d\x3b\xe2\xb4\xb4\xe2\x0f\x8c\xe0\xfa\xb5\xc7\xd2\x48\x8f\x3a\x22\x8c\x47\xed\x36\xe8\x9b\x5f\x20\x78\x51\x80\x8c\x32\x3d\x7c\xef\xa7\x05\x7a\xe8\xb4\x6e\xa1\xcc\xed\xa0\x2e\xa5\xb7\x45\xdd\x3b\xd2\xa1\x75\x77\x45\x2e\x14\x60\x81\x34\x3e\x43\x30\x44\x13\x18\xe1\xdd\x47\x9e\xef\x97\xf9\xee\xf4\xff\x8b\xb6\x4a\xbb\x6a\x04\xf1\x90\x4c\x67\x28\xcb\x11\x47\xf3\x3f\xe0\xa9\x2b\x93\xca\x1f\x7a\x87\xe9\x1a\xae\xce\x57\xc6\xcf\x79\x43\x1e\xb9\x48\xee\x01\xd3\xa3\x21\x9e\x28\x82\x02\x8d\x31\x84\x3e\xf8\x92\x19\x7e\xe7\x62\x72\x07\x13\x2c\x5e\x02\x00\x00\xff\xff\xc1\xa7\x82\x58\x64\x0d\x00\x00")

func compiledPrototypeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeAbi,
		"compiled/Prototype.abi",
	)
}

func compiledPrototypeAbi() (*asset, error) {
	bytes, err := compiledPrototypeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x09\x72\xe3\xba\x0e\xbc\x12\x40\x2c\x04\x8f\xc3\xf5\xfe\x47\xf8\x45\x49\xf1\x12\x25\xb2\x28\x8f\xfc\x5d\x79\xb6\x6b\xca\x63\x58\x5c\xc0\x6e\x34\x08\x32\x0a\x06\x0a\x0c\xe2\x14\x80\x49\x11\x14\x01\x1a\x8a\x57\x00\x20\xf1\x19\x10\x0e\xbe\x02\x00\x2b\xb5\xe5\x85\x6a\xa0\x04\x48\xde\x92\x18\xf2\x34\x8e\x8a\x9f\xac\xae\x30\x95\x3c\x5b\x51\xc2\x62\xe5\xea\x23\x8b\x9f\xad\x85\x67\x2b\xd6\x20\xa9\xb2\x4c\x56\xc7\x38\x5b\x9d\x0b\xce\x8a\xa6\xd9\x1a\xdd\x62\xa5\x62\xd9\x97\xd9\x4a\x20\xb3\x95\x54\x42\xb3\x5a\x66\xab\xd9\x62\x35\x8f\x31\xb4\xe5\xd9\xd2\x66\xab\x16\xcb\x26\x21\x4e\x56\xe6\xa5\x5f\xaf\x9a\xb9\xd1\x3c\x33\x8e\x34\x5b\x0d\x4a\x63\x49\x3c\x5b\xeb\xe2\x9b\xe5\x48\x89\x79\xf6\x4d\x78\xf1\x22\x08\x59\xe6\x44\xb3\x35\xfa\xc5\x5a\x0b\x0a\x65\x98\xac\x0a\xcb\x68\x39\x64\x6e\x99\x71\xb6\xda\xe2\x45\x2e\xc5\xc5\x10\xda\x6c\x6d\x79\xb6\x16\xf3\x44\x14\xf3\x64\xf5\xd4\xc4\x4b\xea\x48\x1a\xb4\x22\x89\xd8\x00\xa5\xaf\x66\xef\xfb\x6a\x17\x98\xd6\xbd\x5b\xd8\x80\x14\xc8\x10\x30\x80\x81\x75\x0e\x5c\x30\x7c\xf4\x42\x0d\x7d\xda\xd0\xdb\x06\x17\xa6\x1e\x9e\x6b\x2f\xd3\xbb\xfb\x92\xa2\xa8\x24\x80\x5b\x2f\x54\xd6\x5e\xa4\xf8\xc6\x5e\x58\xac\xdd\x8b\x29\xe2\xd0\xc0\x1c\xca\xfc\x36\xec\x11\x38\xb5\xc1\xe9\xd9\xe5\x89\x80\x40\x01\x1a\xdd\x7a\x5d\x61\xe5\xb5\x73\x74\x8e\xd7\x7d\x1c\x0c\x1b\x1e\x85\xec\xee\x3d\xfa\x6a\xf1\xf5\x39\xe0\x99\xe3\xb2\xf6\xcc\xf2\x39\x9e\xfd\xea\x51\x4c\xdf\x3c\x1a\xf1\x20\xd6\x95\x07\x04\x27\x61\xf3\x4f\x18\x99\xa2\xae\xe2\x8a\x10\xd7\x5e\xb0\xfe\x7b\x2f\x2e\xb3\x28\x84\xf7\x6b\x3e\xd2\xeb\xc8\xb3\x03\x58\x52\xe0\xf5\x2a\x94\xf2\x1a\x36\x6e\x32\xb4\x22\xac\x31\xab\x69\x35\x5b\x66\x78\x63\xe6\xd5\x8a\x2b\x2f\x98\xd7\xf1\xc3\xf6\xa2\x35\xff\x9a\x19\x82\xe6\xc3\x0a\xc0\xb1\xad\x3d\xa8\x7c\x5e\xec\x20\xea\x9a\x0d\xdc\xd6\xf9\x5d\xdc\x09\xf9\xfd\x32\x0b\x57\xef\x23\x98\xae\x6b\x76\xb7\x7e\x6e\x69\xf1\xfb\x0a\x8a\xac\xf3\x9b\x44\x79\x5f\x26\x23\xe5\xbc\x42\x40\x12\xad\xbd\xa8\x76\x22\x02\x52\xf5\xe9\xbd\x85\xc2\x3a\xfe\x94\x4f\xc8\x5f\x97\x59\x6b\x96\xb7\x53\x7e\x0d\xeb\xfc\xa7\xf5\x84\xfc\xf7\xcf\x56\xb1\xd7\x49\x47\x15\xcb\x83\xad\xbc\xf5\x74\x82\xe6\x5e\x66\x6b\xc9\x56\xf1\xe2\x79\x9d\xbf\x7c\x7c\xe3\xfc\x85\x91\xc2\xd1\x78\xeb\xbe\x65\x32\xa7\x88\x89\x4b\xef\x85\x60\x64\x4e\x4a\x18\x2d\xb9\xe8\x9d\x91\xd1\xd2\x3f\xdd\xd6\xda\xcf\xd4\xed\xb0\xb0\x07\x18\x26\x25\x3f\x3f\x22\x5f\x12\xf5\x97\xcc\x03\x70\xcd\x52\x9d\x57\x13\xeb\xbc\x01\x25\x94\x85\x8d\x16\xbe\xe5\x4f\x89\x0d\xaf\xbf\x46\x95\x39\x42\x3a\x9b\xea\xfc\xbf\xe5\xb9\xeb\x5b\xe7\xca\x7b\x14\x59\x42\x25\x84\x50\x8c\x8d\x3f\xc8\xee\x19\xe3\x8a\xac\x7b\x8c\x6c\xf0\x6d\x03\xd9\x10\x68\x1b\xd9\xb9\xff\x6e\x77\x60\x88\x4b\xab\x18\x6e\xfb\xbc\x2a\x95\xe0\xcf\xea\xd1\x3f\xfb\xf7\x67\x78\xe2\x42\xa5\xda\x9a\xfb\x2b\x3c\xd9\x38\x37\x18\xc1\x37\xea\x16\xbe\xd1\x8e\xe0\x1b\xc3\xff\x01\x5f\x74\x45\xc0\xb5\x3f\xa3\x03\xb7\x73\xbf\x3b\x15\x3e\x86\x73\x52\xda\xc0\x39\x79\x7f\x00\xe7\x64\xe5\x49\x9c\x11\x52\x6c\xcf\xe4\xf5\x90\x8c\x5b\x0e\xe9\x93\xd7\xf7\x8e\x31\xc4\x9a\xec\xeb\x06\x6b\x72\xcf\xfa\xc3\xac\xc9\xd1\xc6\x58\xd3\xf7\x88\x8a\x50\xdc\xc4\xb6\xde\xa3\x6f\x60\x99\x7c\x88\x87\xa1\xbd\x43\x16\xae\x75\x37\x90\xb9\xfe\x0b\xde\xd6\xe3\xe0\x9b\x3a\x2f\x1a\x34\x7b\xd6\xa0\x95\xa2\xeb\x05\x4e\xf3\xec\x40\xd1\x41\x0f\x1e\x15\xef\xb6\xc7\x13\xd8\xd8\xe5\x7e\xad\xda\x41\xf5\x93\xea\x22\xfb\x78\x8d\x02\x77\x52\x14\xbc\xb0\xde\xdc\xc1\xcf\x92\xb7\xf8\x59\xea\x11\x7e\x96\x36\xc8\xcf\x49\xd5\xe6\x6f\xb3\xa6\x55\x0c\x46\xc7\x35\x4d\x13\x97\x0c\x29\xf7\x4c\x76\xc9\x65\x7c\x12\x9e\xfc\x02\x55\xfb\xed\x6c\x8b\xae\x38\xec\xa8\x31\x6a\xe6\x0d\xac\x6b\xb1\x1d\x35\xc6\x05\xa1\x1a\x9f\xc9\x3a\x2a\x51\x53\xd1\x4f\x35\xb9\x7b\x8c\xa1\xac\xd3\x52\xd8\x40\xba\xe5\x72\x20\xaa\x5b\xa5\x23\x59\x67\xba\x40\x7e\x5d\xd6\xd1\xa1\xac\x43\x1e\xb4\x69\xf5\xa4\xed\xe7\xdc\x73\x76\xd6\x49\x50\xd1\x8c\xe3\x67\xcf\xfd\x13\x8f\x11\xb1\xfc\xce\x63\x44\xc2\x71\x1e\x23\xb2\x7f\x6e\xcf\x3d\x8a\x71\x0d\x96\xa8\x19\x9b\xa3\x8f\xd6\xed\x1a\x63\x88\x23\xce\x6d\xd4\xdf\xe8\xf8\x40\xfd\x8d\x4e\x06\xeb\xef\x45\xeb\x5c\xa9\x2f\xd4\xba\xf8\x50\xeb\x50\xb3\x77\x2a\x8a\xca\x3e\x7c\xd7\x3b\x15\xe5\xef\xe3\xed\xd0\x3a\xfd\xfa\xfb\x9e\x71\xad\xcb\x9c\x5c\xb1\x8b\xd2\xfd\x81\x1d\x36\x4f\x9c\xd8\x60\x27\x6d\xd5\x7f\x48\xfb\xeb\x3f\xbe\xb2\x93\xf6\xd7\x7f\x1b\xaa\x86\x77\xff\xbe\x50\xc5\x91\xf5\x40\x9e\xef\x1f\x14\x91\x25\xbd\x90\xf9\xf2\x90\xf9\x41\xab\xd7\xce\x7f\x0d\xca\x8f\xea\xcb\x3d\xcc\xef\x3e\x2a\x3f\xb3\xe7\xb5\x80\xe5\x73\x83\x32\x32\xc6\x50\x1e\x10\xda\x38\x9f\x43\xe1\x03\xe7\x73\x28\x32\x78\x3e\xb7\x44\x83\x54\xf7\x56\x7b\xde\x6f\x79\xa0\x7f\x2a\x7f\xd7\xff\x91\x68\x78\xea\xa4\x25\x68\x6c\x2d\xc9\x7f\xeb\xa4\x05\xd5\xb6\xf8\xa9\xe1\x08\x3f\x35\x1e\x39\x3f\xbe\x9e\xb4\x1c\x40\x0f\x24\x04\x81\x1a\xfe\x63\xe8\x79\xdd\xb8\x9f\x45\xef\x1f\xdc\xcf\xfe\x88\x9e\xb7\xfc\x6a\xf4\x72\xe1\xe6\x1c\xd8\x5f\xa9\x37\xdf\x2c\x07\x99\x97\x0d\x96\x98\x85\x03\x2c\xb1\xd0\x5e\x5b\xaf\x02\x47\x5f\x8b\xb7\x4f\xbd\xba\x77\x8c\x21\x8e\x04\xf3\x1b\x1c\x09\x21\x1d\xe0\x48\x48\x78\x68\x9f\x12\xfb\xa6\xf8\x8d\xf6\x29\xcb\xd9\xdc\x76\x9d\x7a\x3b\xde\xfe\x7a\x75\xfc\x3e\xc8\x14\x1d\xa6\x8f\x52\xee\x1d\x63\x28\x0a\x12\xc4\x8d\x28\x48\x58\x0f\x44\x41\x22\x7e\x52\x29\x87\x90\x18\xad\x95\x0d\x14\x31\xf7\xe8\x17\x18\x1b\xe9\xb3\x47\xdb\xc5\xa9\x4c\x1b\xf7\x5b\x98\xf9\xc1\xfd\xd6\x8f\x9c\xca\x52\xc7\x38\x35\xc6\x09\x49\x8b\x12\xe7\xf6\xc2\xf3\x13\x07\x8f\x94\xd8\x93\x8a\x66\x55\x07\x5d\x81\x1d\x68\x51\xf4\xe4\x59\xa5\x7f\xeb\x9a\xec\xb1\xb7\x99\xd5\x79\xaf\x12\x03\x44\x54\x51\xe7\xa3\x8f\xde\x11\x88\x39\xe0\xe2\xc1\x67\xe7\xb9\x45\xad\xd4\x88\x63\xff\x51\x72\x53\x4d\x88\x26\xc9\x7b\x88\x25\xe6\x48\xc9\xa2\xa4\x4c\x01\x88\xa1\xa5\xc0\x18\xad\x16\x0f\xe0\xc2\xff\x02\x00\x00\xff\xff\x3d\x02\x3c\x14\x54\x3a\x00\x00")

func compiledPrototypeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeBinRuntime,
		"compiled/Prototype.bin-runtime",
	)
}

func compiledPrototypeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x3f\x6b\x84\x40\x10\xc5\xbf\xcb\x90\xd2\xca\x90\x14\xb6\xa9\x03\x21\x21\x95\x58\xcc\xb9\x73\xb0\xa0\xb3\xb2\x33\xeb\xdd\x22\x7e\xf7\xe3\xe4\xf0\x1f\xda\x78\xd7\xee\xce\xfb\xbd\x1f\x2f\xef\x00\xd9\x71\xac\x5d\x10\xc8\xce\x58\x09\x25\x60\xb9\x09\x2a\x90\xe5\x1d\x58\x36\x74\x25\x33\x7e\x31\xd6\x04\x19\x30\x5d\xbe\x51\x94\x3c\x24\xa0\xb1\xb9\x3f\xa1\x31\x9e\x44\xa0\x2f\xc6\xab\xb7\xf5\x0d\xb5\xc4\x0a\x7d\x72\xac\xb4\xf4\x64\xac\x4e\xb4\x60\x59\xd3\x8f\xcf\x81\xb7\x13\xf1\x54\xba\x96\x7c\xfc\x45\xa5\x8d\xe0\x4c\xf5\x6b\x80\xff\x54\xc8\xc7\x75\xd5\x87\xa9\x3a\xc8\xe6\x3a\xfb\xae\x58\xaa\x75\xb3\xf6\x53\x54\x92\xf7\x74\x61\xf9\x2f\xcf\xcc\xb9\xf0\x93\xc6\xb1\xb8\xd7\x2b\xfe\xad\xb9\x0f\xcb\xe2\x16\x00\x00\xff\xff\xa4\xcf\xdd\xbb\x6b\x02\x00\x00")

func compiledPrototypeeventAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventAbi,
		"compiled/PrototypeEvent.abi",
	)
}

func compiledPrototypeeventAbi() (*asset, error) {
	bytes, err := compiledPrototypeeventAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x81\x01\x44\x31\x04\x03\xd0\x95\x52\x7e\x82\x71\x5c\xd5\xfe\x23\xdc\x13\x12\xc2\x07\x9a\x00\x24\x76\x80\x3e\xa2\x2c\x3a\x3a\xcc\xc1\x34\x38\xab\xd4\x3a\x3d\x9f\xf9\xdb\x82\x3b\xbd\x9e\x6a\x7b\x7f\x63\x31\xcf\x77\xe6\x0d\x3b\x3d\x92\x2c\x53\x8d\x98\x88\xf3\x2e\xef\x01\xac\xfe\x01\x00\x00\xff\xff\x31\xf3\xb1\x65\x6a\x00\x00\x00")

func compiledPrototypeeventBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventBinRuntime,
		"compiled/PrototypeEvent.bin-runtime",
	)
}

func compiledPrototypeeventBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeeventBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4f\xeb\x9b\x40\x10\xfd\x2e\x7b\xf6\xf4\x2b\xed\x21\xb7\x36\xd0\x5b\x4a\x69\xe9\x29\x84\x32\xae\x93\x74\xc9\x3a\x2b\x3b\xb3\x06\x09\xfd\xee\xc5\x80\x51\xaa\x54\x4d\xfd\x93\x1c\x85\x99\xf1\x3d\xde\xec\x7b\xb3\xbf\x2a\xed\x88\x05\x48\xd4\xe6\x08\x96\x31\x52\x86\xb2\x20\xac\x36\xfb\xab\x22\x48\x51\x6d\x14\xa3\x3d\xaa\x48\x49\x91\x95\x5f\x90\x24\x1e\x99\xd5\xef\xa8\x2e\xc8\x1c\xb1\xf3\x1d\x35\x87\xa8\xaa\x21\x10\x93\xe3\xcf\x40\x75\xb1\x0b\xf2\xf7\xaf\xea\x11\xb1\x73\xf6\xd6\x9f\x41\x01\xb1\xc5\x3b\x3e\x16\x10\xdc\x05\x81\xd8\x58\x23\x45\x39\xda\x51\x55\x74\x6f\x3f\x06\xd2\x62\x1c\xdd\x60\xd6\x1c\xc5\x87\x31\x14\x5b\xf0\x53\x60\xc1\x5e\xec\xcd\xfe\x7e\xf8\xb9\xc1\xcb\xd4\xc0\x6b\x6d\x62\xeb\xf4\xf9\x4b\x48\x63\x6c\xe8\x13\x0c\xc9\xbb\xb7\x0e\x7e\x48\xe8\x4f\xc5\x47\xf9\x54\x76\xf5\xd1\x2c\xa7\xbc\xbd\xff\x30\x25\xcd\xc7\x77\x90\xf0\xb2\xab\xc4\xe9\x95\x91\x51\x76\x6d\x25\x57\x5e\xb6\x9a\xcb\x19\x8b\xc6\x43\x28\x04\xb9\x53\x2c\x16\xe7\xe1\x84\x9f\x07\x3c\xa6\xc6\x8c\xb5\x17\x32\xf0\x30\x8d\x0c\xff\xe0\xfe\xa7\x36\xc2\x26\xe6\xa0\xd5\x42\xfd\x0b\x78\xeb\x12\x7c\x35\xd8\x3a\x78\x8f\x24\xdf\x87\x79\xf3\x33\xf9\xdb\x88\xec\x31\x3c\x90\xdf\xd4\xea\x2c\x92\xac\x8c\x16\xf5\x50\x05\xe7\x49\xd7\xc7\x79\x6a\x8f\x89\x91\x8e\x68\xa9\x4b\x3c\x6a\x97\xa3\x2f\xbe\x81\x60\x77\x06\xb5\x3c\x7e\x7b\x9b\xfa\xd5\x02\xcd\xea\xf3\x8f\xd3\x1e\xea\x85\x90\x24\x13\x9b\xe1\x53\xd1\xf3\x98\xba\x1c\xd7\x63\xf8\xdf\xee\xd9\xbd\x67\xff\x3a\x99\xa2\x65\xee\xa9\x85\xce\xc6\x18\x2c\x90\xc6\xf5\xee\xc6\xd9\xaf\x91\xb2\x6e\x5b\x99\xd4\xeb\x5c\xc5\x63\xf2\x63\xe1\xe4\x38\xfc\x09\x00\x00\xff\xff\xb1\x59\x01\xf8\x7d\x0e\x00\x00")

func compiledPrototypenativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeAbi,
		"compiled/PrototypeNative.abi",
	)
}

func compiledPrototypenativeAbi() (*asset, error) {
	bytes, err := compiledPrototypenativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeBinRuntime,
		"compiled/PrototypeNative.bin-runtime",
	)
}

func compiledPrototypenativeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypenativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Extension.abi": compiledExtensionAbi,
	"compiled/Extension.bin-runtime": compiledExtensionBinRuntime,
	"compiled/ExtensionNative.abi": compiledExtensionnativeAbi,
	"compiled/ExtensionNative.bin-runtime": compiledExtensionnativeBinRuntime,
	"compiled/Measure.abi": compiledMeasureAbi,
	"compiled/Measure.bin-runtime": compiledMeasureBinRuntime,
	"compiled/Meter.abi": compiledMeterAbi,
	"compiled/Meter.bin-runtime": compiledMeterBinRuntime,
	"compiled/MeterGov.abi": compiledMetergovAbi,
	"compiled/MeterGov.bin-runtime": compiledMetergovBinRuntime,
	"compiled/MeterNative.abi": compiledMeternativeAbi,
	"compiled/MeterNative.bin-runtime": compiledMeternativeBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,
	"compiled/Prototype.abi": compiledPrototypeAbi,
	"compiled/Prototype.bin-runtime": compiledPrototypeBinRuntime,
	"compiled/PrototypeEvent.abi": compiledPrototypeeventAbi,
	"compiled/PrototypeEvent.bin-runtime": compiledPrototypeeventBinRuntime,
	"compiled/PrototypeNative.abi": compiledPrototypenativeAbi,
	"compiled/PrototypeNative.bin-runtime": compiledPrototypenativeBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Extension.abi": &bintree{compiledExtensionAbi, map[string]*bintree{}},
		"Extension.bin-runtime": &bintree{compiledExtensionBinRuntime, map[string]*bintree{}},
		"ExtensionNative.abi": &bintree{compiledExtensionnativeAbi, map[string]*bintree{}},
		"ExtensionNative.bin-runtime": &bintree{compiledExtensionnativeBinRuntime, map[string]*bintree{}},
		"Measure.abi": &bintree{compiledMeasureAbi, map[string]*bintree{}},
		"Measure.bin-runtime": &bintree{compiledMeasureBinRuntime, map[string]*bintree{}},
		"Meter.abi": &bintree{compiledMeterAbi, map[string]*bintree{}},
		"Meter.bin-runtime": &bintree{compiledMeterBinRuntime, map[string]*bintree{}},
		"MeterGov.abi": &bintree{compiledMetergovAbi, map[string]*bintree{}},
		"MeterGov.bin-runtime": &bintree{compiledMetergovBinRuntime, map[string]*bintree{}},
		"MeterNative.abi": &bintree{compiledMeternativeAbi, map[string]*bintree{}},
		"MeterNative.bin-runtime": &bintree{compiledMeternativeBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime": &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Prototype.abi": &bintree{compiledPrototypeAbi, map[string]*bintree{}},
		"Prototype.bin-runtime": &bintree{compiledPrototypeBinRuntime, map[string]*bintree{}},
		"PrototypeEvent.abi": &bintree{compiledPrototypeeventAbi, map[string]*bintree{}},
		"PrototypeEvent.bin-runtime": &bintree{compiledPrototypeeventBinRuntime, map[string]*bintree{}},
		"PrototypeNative.abi": &bintree{compiledPrototypenativeAbi, map[string]*bintree{}},
		"PrototypeNative.bin-runtime": &bintree{compiledPrototypenativeBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

